{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "from IPython.display import Image, display\n",
    "from langgraph.graph import START, END, StateGraph\n",
    "from langgraph.checkpoint.memory import MemorySaver\n",
    "from langchain_core.messages import AIMessage, HumanMessage, SystemMessage\n",
    "import sqlite3\n",
    "\n",
    "from yaml import load\n",
    "from yaml import SafeLoader\n",
    "from langgraph.prebuilt import ToolNode\n",
    "from langchain_core.messages import ToolMessage\n",
    "import json\n",
    "\n",
    "from typing import Annotated, Literal\n",
    "from langchain_openai import ChatOpenAI\n",
    "from langgraph.graph.message import add_messages\n",
    "from langgraph.prebuilt import ToolNode\n",
    "from openai import OpenAI\n",
    "from typing_extensions import TypedDict\n",
    "import openai\n",
    "os.environ[\"OPENAI_API_KEY\"] = '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'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "def contains_valid_word(response_text):\n",
    "\n",
    "  pattern = r'\\bVALID\\b' \n",
    "  if re.search(pattern, response_text):\n",
    "    return True\n",
    "  else:\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "INITIAL_PROMPT = \"\"\"\n",
    "You are a professional fitness coach.\n",
    "\n",
    "Your mission is to help people reach their fitness goals by:\n",
    "- Analyzing their current fitness level, body weight and height\n",
    "\n",
    "WEGHIT:{weight}\n",
    "HEIGHT:{tall}\n",
    "GOAL:{goal}\n",
    "intensity:{intensity}\n",
    "age:{age}\n",
    "sex:{sex}\n",
    "Equipment: local gym\n",
    " don't have two or more exercises for the same primary and secondary muscles\n",
    " \n",
    " Prioritize variety and muscle group balance\n",
    "\n",
    "** Use your knowledge and tools to search for relevant exercises from a database\n",
    "   and determine optimal sets, reps, and intensity based on the user's goals.\n",
    "   search one primary muscle group and one sub-muscle group at a time.\n",
    "\n",
    "IMPORTANT:\n",
    "   - Back: exactly 5 exercises\n",
    "   - Chest: exactly 5 exercises\n",
    "   - Shoulders: exactly 5 exercises\n",
    "   - Arms: exactly 6 exercises\n",
    "   - Legs: exactly 6 exercises\n",
    "   - Core: exactly 2 exercises\n",
    "   \n",
    "** Output the full program in a clean, structured format that includes:\n",
    "   - Exercises with primary/secondary muscle groups\n",
    "   - Instructions, sets, reps, and variations\n",
    "   - the plan is 5 days long\n",
    "\n",
    "\n",
    "NOTIFIY THE USER how many exercises THE DATABASE RETURNED  THE CORRECT ANSWER and how many NO ANSWER.\n",
    "and 2 for core \n",
    "make sure that primary muscle and sub muscle you search are in this massage list\n",
    "\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "JUDGE_PROMPT = \"\"\"\n",
    "You are a fitness program evaluator. Your task is to assess the quality, accuracy, and completeness of a workout program.\n",
    "Evaluate the following workout plan according to these criteria:\n",
    "\n",
    "\n",
    "1. **Exercise Count Validation**:\n",
    "   - Back: exactly 5 exercises\n",
    "   - Chest: exactly 5 exercises\n",
    "   - Shoulders: exactly 5 exercises\n",
    "   - Arms: exactly 6 exercises\n",
    "   - Legs: exactly 6 exercises\n",
    "   - Core: exactly 2 exercises\n",
    "\n",
    "2. **Muscle Group Coverage**:\n",
    "   - Ensure each listed body part targets both **primary** and **secondary** muscle groups.\n",
    "   - Verify that **lower back** is included as a target at least once, preferably on Back or Legs day.\n",
    "\n",
    "3. **Variety & Movement Pattern Check**:\n",
    "   - Ensure that there is **no repetition of the same movement pattern** (e.g., multiple types of horizontal rows or vertical presses) within a single muscle group day.\n",
    "   - Confirm **variety in exercises** to promote balanced muscle development.\n",
    "\n",
    "4. **Format Consistency**:\n",
    "   - Each exercise must include: **name**, **primary muscles**, **secondary muscles**, **sets**, and **reps**.\n",
    "   - Plan must be clean, structured, and easy to read.\n",
    "\n",
    "5. **Feedback on Plan**:\n",
    "   - If all criteria are met: respond with `\"VALID PLAN\"` otherwise dont say Valid.\n",
    "   - If criteria are not met: respond with `\"INVALID PLAN\"` and clearly explain **which criteria were violated** and how to fix them. \n",
    "   - Be as concise and clear as possible\n",
    "Review the plan below and return your evaluation:\n",
    "===\n",
    "{plan}\n",
    "===\n",
    "\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_stream(stream):\n",
    "    for s in stream:\n",
    "        message = s[\"messages\"][-1]\n",
    "        message.pretty_print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = load(open(\"config.yaml\"), Loader=SafeLoader)\n",
    "os.environ[\"GROQ_API_KEY\"] = config[\"groq\"][\"apiKey\"]\n",
    "from langchain_groq import ChatGroq\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain.tools import tool\n",
    "connection = sqlite3.connect(\"work_out.db\")\n",
    "@tool\n",
    "def get_exercises(body_part: str, primary_muscles: str, secondary_muscles: str,exercises_number:int=2) -> list:\n",
    "    \"\"\"\n",
    "    Fetches exercises from the SQLite database based on primary and sub muscle.\n",
    "\n",
    "    Args:\n",
    "        body_part (str): The body part to filter exercises by Body parts: Back, Chest, Leg, Shoulders, Arms.\n",
    "        primary_muscles (str): Primary muscle group targeted.\n",
    "        secondary_muscle (str): Secondary muscle group targeted.\n",
    "        exercises_number (int): Number of exercises to fetch (default is 2) change if you need more results.\n",
    "    \n",
    "    Returns:\n",
    "        str: A formatted string listing matching exercises, one per line.\n",
    "    \"\"\"\n",
    "    primary_muscles = primary_muscles.lower().strip()\n",
    "    secondary_muscles = secondary_muscles.lower().strip()\n",
    "    body_part = body_part.lower().strip()\n",
    "    body_part_modified = body_part[:-1] if body_part.endswith('s') else body_part\n",
    "\n",
    "    connection = sqlite3.connect(\"work_out.db\")\n",
    "    cursor = connection.cursor()\n",
    "    query = f\"\"\"\n",
    "        SELECT exercise,primary_muscles,secondary_muscles \n",
    "        FROM DATASET\n",
    "        WHERE (primary_muscles LIKE '%{primary_muscles}%' \n",
    "               and secondary_muscles LIKE '%{secondary_muscles}%')\n",
    "        AND body_part = '{body_part_modified}'\n",
    "        LIMIT {exercises_number};\n",
    "    \"\"\"\n",
    "    parameters = (f\"%{primary_muscles}%\", f\"%{secondary_muscles}%\", body_part_modified)\n",
    "    cursor.execute(query)\n",
    "    rows = cursor.fetchall()\n",
    "    connection.close()\n",
    "    if not rows:\n",
    "        return \"no exercises found\"\n",
    "    exercise_details = []\n",
    "    for i, (name, prim, sec) in enumerate(rows, 1):\n",
    "        name_str = str(name).strip() if name else \"Unknown Exercise\"\n",
    "        prim_str = str(prim).strip() if prim else \"N/A\"\n",
    "        sec_str = str(sec).strip() if sec else \"N/A\" \n",
    "        exercise_details.append(\n",
    "            f\"{i}. {name_str}\\n   Primary: {prim_str}\\n   Secondary: {sec_str}\"\n",
    "        )\n",
    "    formatted_output = \"\\n \".join(exercise_details)\n",
    "    return f\"Found these exercises:\\n{formatted_output}\"\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "tools=[get_exercises]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "llm_plan = ChatGroq(\n",
    "    model=\"llama-3.3-70b-versatile\",\n",
    "    temperature=0,\n",
    "    max_tokens=None,\n",
    "    timeout=None,\n",
    "    max_retries=2,\n",
    ")\n",
    "\n",
    "llm_judge = ChatGroq(\n",
    "    model=\"meta-llama/llama-4-maverick-17b-128e-instruct\",\n",
    "    temperature=0,\n",
    "    max_tokens=None,\n",
    "    timeout=None,\n",
    "    max_retries=2,\n",
    ")\n",
    "llm_judge=llm_plan\n",
    "llm=llm_plan.bind_tools(tools)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "tool_node=ToolNode(tools)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "class State(TypedDict):\n",
    "    messages: Annotated[list,add_messages]\n",
    "    jude: Annotated[list,add_messages]\n",
    "    summary_plan: str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "openai_client = OpenAI(\n",
    "  base_url=\"https://openrouter.ai/api/v1\",\n",
    "  \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "llm2=ChatOpenAI(model=\"meta-llama/llama-4-maverick:free\",base_url=\"https://openrouter.ai/api/v1\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class State(TypedDict):\n",
    "    messages: Annotated[list,add_messages]\n",
    "    judge: str\n",
    "    summary_plan: str\n",
    "    \n",
    "def should_continue(state: State) -> Literal[\"tools\", \"judger\",END]:  # Changed \"summary\" to \"end\"\n",
    "    messages = state[\"messages\"]\n",
    "    last_message = messages[-1]\n",
    "    \n",
    "    # Only continue to tools if there are active tool calls\n",
    "    if hasattr(last_message, \"tool_calls\") and last_message.tool_calls:\n",
    "        return \"tools\"\n",
    "    if \"judge\" in state and contains_valid_word(state[\"judge\"]):\n",
    "        return END\n",
    "    else:\n",
    "        return \"judger\"\n",
    "\n",
    "\n",
    "def call_model(state: State):\n",
    "    #always send the last 5 messages to the model\n",
    "    print(\"you are in call model \")\n",
    "    messages = state[\"messages\"]\n",
    "    for i, msg in enumerate(messages):\n",
    "        if isinstance(msg, ToolMessage) and not isinstance(msg.content, str):\n",
    "            messages[i] = ToolMessage(\n",
    "                tool_call_id=msg.tool_call_id,\n",
    "                content=json.dumps(msg.content)\n",
    "            )\n",
    "    messages=messages[-10:]\n",
    "    response = llm.invoke(messages)\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "def summary_node(state: State):\n",
    "    print(\"you are in summary \")\n",
    "    messages = state[\"messages\"]\n",
    "    messages.append( summary_prompt)\n",
    "    summarize =llm.invoke(messages)\n",
    "    print(\"you are near end \")\n",
    "\n",
    "    return {\n",
    "        \"messages\": messages,\n",
    "        \"summary_plan\": summarize,\n",
    "    }\n",
    "def call_judge(state:State):\n",
    "    lastmessage = state[\"messages\"][-1]\n",
    "    prompt=JUDGE_PROMPT.format(plan=lastmessage)\n",
    "    response=llm_pure.invoke(prompt)\n",
    "    print(\"**********************************************************************\")\n",
    "    \n",
    "    new_message = HumanMessage(content=response.content)\n",
    "    return {\n",
    "        \"messages\": new_message,\n",
    "          \"judge\": response.content\n",
    "      }\n",
    "workflow = StateGraph(State)\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"tools\", tool_node)\n",
    "workflow.add_node(\"judger\", call_judge)\n",
    "workflow.add_edge(START, \"agent\")\n",
    "workflow.add_conditional_edges(\"agent\", should_continue)\n",
    "workflow.add_edge(\"judger\", \"agent\")\n",
    "\n",
    "workflow.add_edge(\"tools\", \"agent\")\n",
    "#workflow.add_edge(\"summary\", END)\n",
    "checkpointer = MemorySaver()\n",
    "graph = workflow.compile(checkpointer=checkpointer)\n",
    "display(Image(graph.get_graph(xray=1).draw_mermaid_png()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "INITIAL_PROMPT=INITIAL_PROMPT.format(weight=90, tall=180,goal=\"get lean muscle\",sex=\"male\",age=25,intensity=\"high\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = {\n",
    "    \"recursion_limit\": 70,\n",
    "    \"configurable\": {\n",
    "        \"thread_id\": 78,}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "\n",
      "You are a professional fitness coach.\n",
      "\n",
      "Your mission is to help people reach their fitness goals by:\n",
      "- Analyzing their current fitness level, body weight and height\n",
      "\n",
      "WEGHIT:90\n",
      "HEIGHT:180\n",
      "GOAL:get lean muscle\n",
      "intensity:high\n",
      "age:25\n",
      "sex:male\n",
      "Equipment: local gym\n",
      " don't have two or more exercises for the same primary and secondary muscles\n",
      " \n",
      " Prioritize variety and muscle group balance\n",
      "\n",
      "** Use your knowledge and tools to search for relevant exercises from a database\n",
      "   and determine optimal sets, reps, and intensity based on the user's goals.\n",
      "   search one primary muscle group and one sub-muscle group at a time.\n",
      "\n",
      "IMPORTANT:\n",
      "   - Back: exactly 5 exercises\n",
      "   - Chest: exactly 5 exercises\n",
      "   - Shoulders: exactly 5 exercises\n",
      "   - Arms: exactly 6 exercises\n",
      "   - Legs: exactly 6 exercises\n",
      "   - Core: exactly 2 exercises\n",
      "   \n",
      "** Output the full program in a clean, structured format that includes:\n",
      "   - Exercises with primary/secondary muscle groups\n",
      "   - Instructions, sets, reps, and variations\n",
      "   - the plan is 5 days long\n",
      "\n",
      "\n",
      "NOTIFIY THE USER how many exercises THE DATABASE RETURNED  THE CORRECT ANSWER and how many NO ANSWER.\n",
      "and 2 for core \n",
      "make sure that primary muscle and sub muscle you search are in this massage list\n",
      "\n",
      "\n",
      "\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_exercises (call_b8dd)\n",
      " Call ID: call_b8dd\n",
      "  Args:\n",
      "    body_part: Back\n",
      "    primary_muscles: Latissimus Dorsi\n",
      "    secondary_muscles: Trapezius\n",
      "    exercises_number: 5\n",
      "  get_exercises (call_h1pd)\n",
      " Call ID: call_h1pd\n",
      "  Args:\n",
      "    body_part: Chest\n",
      "    primary_muscles: Pectoralis Major\n",
      "    secondary_muscles: Anterior Deltoids\n",
      "    exercises_number: 5\n",
      "  get_exercises (call_qcna)\n",
      " Call ID: call_qcna\n",
      "  Args:\n",
      "    body_part: Shoulders\n",
      "    primary_muscles: Deltoids\n",
      "    secondary_muscles: Trapezius\n",
      "    exercises_number: 5\n",
      "  get_exercises (call_k5cb)\n",
      " Call ID: call_k5cb\n",
      "  Args:\n",
      "    body_part: Arms\n",
      "    primary_muscles: Biceps Brachii\n",
      "    secondary_muscles: Brachialis\n",
      "    exercises_number: 3\n",
      "  get_exercises (call_633q)\n",
      " Call ID: call_633q\n",
      "  Args:\n",
      "    body_part: Arms\n",
      "    primary_muscles: Triceps Brachii\n",
      "    secondary_muscles: Anconeus\n",
      "    exercises_number: 3\n",
      "  get_exercises (call_h5aj)\n",
      " Call ID: call_h5aj\n",
      "  Args:\n",
      "    body_part: Legs\n",
      "    primary_muscles: Quadriceps\n",
      "    secondary_muscles: Hamstrings\n",
      "    exercises_number: 3\n",
      "  get_exercises (call_rx31)\n",
      " Call ID: call_rx31\n",
      "  Args:\n",
      "    body_part: Legs\n",
      "    primary_muscles: Hamstrings\n",
      "    secondary_muscles: Gluteus Maximus\n",
      "    exercises_number: 3\n",
      "  get_exercises (call_akk6)\n",
      " Call ID: call_akk6\n",
      "  Args:\n",
      "    body_part: Core\n",
      "    primary_muscles: Rectus Abdominis\n",
      "    secondary_muscles: Obliques\n",
      "    exercises_number: 2\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: get_exercises\n",
      "\n",
      "no exercises found\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Based on the provided information and the exercises found, I will create a 5-day workout plan for you. \n",
      "\n",
      "**Day 1: Back and Biceps**\n",
      "\n",
      "1. Chin-Ups\n",
      "   Primary: Latissimus Dorsi\n",
      "   Secondary: Biceps, Trapezius, Rhomboids, Shoulders, Forearms\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Behind-the-Neck Pulldown\n",
      "   Primary: Latissimus Dorsi\n",
      "   Secondary: Lower Trapezius\n",
      "   Instructions: 3 sets of 10-15 reps\n",
      "3. Barbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Dumbbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Incline Dumbbell Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Forearm muscles, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "**Day 2: Chest and Triceps**\n",
      "\n",
      "1. Barbell Bench Press\n",
      "   Primary: Pectoralis Major\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Incline Barbell Bench Press\n",
      "   Primary: Upper Pectoralis Major\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Decline Dumbbell Bench Press\n",
      "   Primary: Pectoralis Major, Triceps\n",
      "   Secondary: Anterior Deltoids, Glutes, Abdominal muscles\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Cable Chest Flys\n",
      "   Primary: Pectoralis Major, Pectoralis Minor\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "\n",
      "**Day 3: Shoulders and Abs**\n",
      "\n",
      "1. Dumbbell Shoulder Press\n",
      "   Primary: Deltoids\n",
      "   Secondary: Trapezius, Triceps, Upper Chest\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Kettlebell Shoulder Press\n",
      "   Primary: Deltoids, Serratus Anterior\n",
      "   Secondary: Traps, Triceps, Upper Trapezius\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Barbell Front Raise\n",
      "   Primary: Anterior Deltoids\n",
      "   Secondary: Lateral Deltoids, Trapezius, Upper Chest\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Cable Front Raise\n",
      "   Primary: Anterior Deltoids\n",
      "   Secondary: Upper Chest, Trapezius, Biceps\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Cable Reverse Fly\n",
      "   Primary: Rear Deltoids, Rhomboids\n",
      "   Secondary: Lateral Deltoid, Trapezius, Rotator cuff muscles\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "\n",
      "**Day 4: Legs**\n",
      "\n",
      "1. Front Squat\n",
      "   Primary: Quadriceps, Glutes, Core\n",
      "   Secondary: Hamstrings, Inner thighs, Upper back\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Hack Squat\n",
      "   Primary: Quadriceps, Glutes\n",
      "   Secondary: Hamstrings, Calves\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Wall Sit\n",
      "   Primary: Quadriceps, Glutes, Calves\n",
      "   Secondary: Hamstrings, Core\n",
      "   Instructions: 3 sets of 60-second hold\n",
      "4. Seated Leg Curl (Machine)\n",
      "   Primary: Hamstrings, Biceps Femoris, Semitendinosus, Semimembranosus\n",
      "   Secondary: Calves, Gluteus Maximus, Gastrocnemius\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "**Day 5: Arms and Core**\n",
      "\n",
      "1. Barbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "2. Dumbbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Incline Dumbbell Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Forearm muscles, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "The database returned 13 exercises. There were no answers for 2 exercises.\n",
      "**********************************************************************\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "\"INVALID PLAN\"\n",
      "\n",
      "**Violations and Corrections:**\n",
      "\n",
      "1. **Exercise Count Validation**:\n",
      "   - Back: Only 2 exercises are listed (Chin-Ups, Behind-the-Neck Pulldown), but it should have exactly 5 exercises.\n",
      "   - Chest: 4 exercises are listed, but it should have exactly 5 exercises.\n",
      "   - Shoulders: Exactly 5 exercises are listed, which meets the criteria.\n",
      "   - Arms: Only 3 bicep exercises are listed on Day 5, and 2 bicep exercises are also included on Day 1. The plan should have exactly 6 exercises for arms, including triceps.\n",
      "   - Legs: 4 exercises are listed, but it should have exactly 6 exercises.\n",
      "   - Core: Only 0-1 unique exercises are effectively targeting core directly in the plan, it should have exactly 2 exercises.\n",
      "\n",
      "2. **Muscle Group Coverage**:\n",
      "   - The plan includes both primary and secondary muscle groups for most exercises, which is good.\n",
      "   - Lower back is targeted indirectly through some exercises (e.g., Chin-Ups, Front Squat), but a direct lower back exercise is missing.\n",
      "\n",
      "3. **Variety & Movement Pattern Check**:\n",
      "   - Day 1 (Back and Biceps) and Day 5 (Arms and Core) have repetitive bicep curl exercises, violating the variety rule.\n",
      "   - Day 2 (Chest and Triceps) lacks triceps exercises entirely, violating the rule for arms.\n",
      "   - Day 4 (Legs) lacks variety in leg exercises, missing exercises like deadlifts or lunges.\n",
      "\n",
      "4. **Format Consistency**:\n",
      "   - Each exercise includes the required information (name, primary muscles, secondary muscles, sets, and reps), so the format is consistent.\n",
      "\n",
      "**How to Fix:**\n",
      "\n",
      "1. **Adjust Exercise Count**:\n",
      "   - Add more exercises to Back, Chest, Arms, Legs, and Core to meet the exact counts required.\n",
      "   - Ensure triceps are included on Chest and Triceps day.\n",
      "\n",
      "2. **Improve Muscle Group Coverage**:\n",
      "   - Include a direct lower back exercise.\n",
      "\n",
      "3. **Enhance Variety**:\n",
      "   - Vary exercises within each muscle group day to avoid repetition of movement patterns.\n",
      "   - Include a mix of compound exercises (e.g., deadlifts for legs, rows for back).\n",
      "\n",
      "4. **Reorganize the Plan**:\n",
      "   - Reconsider the split to ensure all muscle groups are adequately targeted across the 5 days.\n",
      "\n",
      "By addressing these issues, the plan can be made more comprehensive and balanced.\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_exercises (call_vbhz)\n",
      " Call ID: call_vbhz\n",
      "  Args:\n",
      "    body_part: Back\n",
      "    primary_muscles: Latissimus Dorsi\n",
      "    secondary_muscles: Trapezius\n",
      "    exercises_number: 5\n",
      "  get_exercises (call_avd9)\n",
      " Call ID: call_avd9\n",
      "  Args:\n",
      "    body_part: Chest\n",
      "    primary_muscles: Pectoralis Major\n",
      "    secondary_muscles: Anterior Deltoids\n",
      "    exercises_number: 5\n",
      "  get_exercises (call_d479)\n",
      " Call ID: call_d479\n",
      "  Args:\n",
      "    body_part: Arms\n",
      "    primary_muscles: Biceps Brachii\n",
      "    secondary_muscles: Triceps Brachii\n",
      "    exercises_number: 6\n",
      "  get_exercises (call_z308)\n",
      " Call ID: call_z308\n",
      "  Args:\n",
      "    body_part: Legs\n",
      "    primary_muscles: Quadriceps\n",
      "    secondary_muscles: Hamstrings\n",
      "    exercises_number: 6\n",
      "  get_exercises (call_mmpd)\n",
      " Call ID: call_mmpd\n",
      "  Args:\n",
      "    body_part: Core\n",
      "    primary_muscles: Abdominals\n",
      "    secondary_muscles: Obliques\n",
      "    exercises_number: 2\n",
      "  get_exercises (call_as5k)\n",
      " Call ID: call_as5k\n",
      "  Args:\n",
      "    body_part: Lower Back\n",
      "    primary_muscles: Erector Spinae\n",
      "    secondary_muscles: Latissimus Dorsi\n",
      "    exercises_number: 1\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: get_exercises\n",
      "\n",
      "no exercises found\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Based on the provided information and the exercises found, I will create a 5-day workout plan for you. \n",
      "\n",
      "**Day 1: Back and Biceps**\n",
      "\n",
      "1. Chin-Ups\n",
      "   Primary: Latissimus Dorsi\n",
      "   Secondary: Biceps, Trapezius, Rhomboids, Shoulders, Forearms\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Behind-the-Neck Pulldown\n",
      "   Primary: Latissimus Dorsi\n",
      "   Secondary: Lower Trapezius\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Barbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Dumbbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Incline Dumbbell Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Forearm muscles, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "**Day 2: Chest and Triceps**\n",
      "\n",
      "1. Barbell Bench Press\n",
      "   Primary: Pectoralis Major\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Incline Barbell Bench Press\n",
      "   Primary: Upper Pectoralis Major\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Decline Dumbbell Bench Press\n",
      "   Primary: Pectoralis Major, Triceps\n",
      "   Secondary: Anterior Deltoids, Glutes, Abdominal muscles\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Cable Chest Flys\n",
      "   Primary: Pectoralis Major, Pectoralis Minor\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "5. Tricep Pushdown\n",
      "   Primary: Triceps Brachii\n",
      "   Secondary: Anconeus\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "**Day 3: Shoulders and Abs**\n",
      "\n",
      "1. Dumbbell Shoulder Press\n",
      "   Primary: Deltoids\n",
      "   Secondary: Trapezius, Triceps, Upper Chest\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Kettlebell Shoulder Press\n",
      "   Primary: Deltoids, Serratus Anterior\n",
      "   Secondary: Traps, Triceps, Upper Trapezius\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Barbell Front Raise\n",
      "   Primary: Anterior Deltoids\n",
      "   Secondary: Lateral Deltoids, Trapezius, Upper Chest\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Cable Front Raise\n",
      "   Primary: Anterior Deltoids\n",
      "   Secondary: Upper Chest, Trapezius, Biceps\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Cable Reverse Fly\n",
      "   Primary: Rear Deltoids, Rhomboids\n",
      "   Secondary: Lateral Deltoid, Trapezius, Rotator cuff muscles\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "\n",
      "**Day 4: Legs**\n",
      "\n",
      "1. Front Squat\n",
      "   Primary: Quadriceps, Glutes, Core\n",
      "   Secondary: Hamstrings, Inner thighs, Upper back\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Hack Squat\n",
      "   Primary: Quadriceps, Glutes\n",
      "   Secondary: Hamstrings, Calves\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Wall Sit\n",
      "   Primary: Quadriceps, Glutes, Calves\n",
      "   Secondary: Hamstrings, Core\n",
      "   Instructions: 3 sets of 60-second hold\n",
      "4. Box Squat\n",
      "   Primary: Quadriceps\n",
      "   Secondary: Hamstrings, Calves, Glutes, Core, Adductors\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Spanish Squat\n",
      "   Primary: Quadriceps, Glutes\n",
      "   Secondary: Hamstrings, Calves, Core musculature\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "6. Curtsy Lunge\n",
      "   Primary: Quadriceps, Glutes\n",
      "   Secondary: Hamstrings, Core\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "**Day 5: Arms and Core**\n",
      "\n",
      "1. Barbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "2. Dumbbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Incline Dumbbell Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Forearm muscles, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Tricep Pushdown\n",
      "   Primary: Triceps Brachii\n",
      "   Secondary: Anconeus\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Overhead Dumbbell Extension\n",
      "   Primary: Triceps Brachii\n",
      "   Secondary: Anconeus\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "6. Skull Crusher\n",
      "   Primary: Triceps Brachii\n",
      "   Secondary: Anconeus\n",
      "   Instructions: 3 sets of 8-10 reps\n",
      "\n",
      "The database returned 21 exercises. There were no answers for 2 exercises.\n",
      "**********************************************************************\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "\"INVALID PLAN\"\n",
      "\n",
      "**Violations and Corrections:**\n",
      "\n",
      "1. **Exercise Count Validation**:\n",
      "   - Back: Day 1 includes 2 Back exercises and 3 Biceps exercises. It should have exactly 5 Back exercises.\n",
      "   - Chest: Day 2 includes 4 Chest exercises and 1 Triceps exercise. It should have exactly 5 Chest exercises.\n",
      "   - Shoulders: Day 3 includes 5 Shoulder exercises, which is correct.\n",
      "   - Arms: Day 1 and Day 5 both train Arms. Day 1 has 3 Biceps exercises, and Day 5 has 3 Biceps and 3 Triceps exercises. It should have exactly 6 exercises for Arms in total, but they are split across two days.\n",
      "   - Legs: Day 4 has exactly 6 Leg exercises, which is correct.\n",
      "   - Core: Day 3 and Day 5 both include Core exercises, but not as a dedicated day with exactly 2 exercises.\n",
      "\n",
      "2. **Muscle Group Coverage**:\n",
      "   - Lower Back is targeted in \"Chin-Ups\" on Day 1 (Secondary: ... Rhomboids, Shoulders, Forearms) and \"Front Squat\" on Day 4 (Secondary: ... Upper back), so it is included.\n",
      "\n",
      "3. **Variety & Movement Pattern Check**:\n",
      "   - Day 1 (Back): Only 2 Back exercises are given, and both target Latissimus Dorsi. More variety is needed.\n",
      "   - Day 2 (Chest): Multiple variations of bench press are given, which is good, but there's a repetition of similar movement patterns (e.g., Barbell Bench Press and Incline/Decline variations). However, the main issue is the lack of exactly 5 Chest exercises.\n",
      "   - Day 3 (Shoulders): Multiple exercises target Deltoids, but there's repetition in movement patterns (e.g., Dumbbell and Kettlebell Shoulder Press, Barbell and Cable Front Raise). More diverse exercises are needed.\n",
      "   - Day 4 (Legs): Varied exercises are given, which is good.\n",
      "   - Day 5 (Arms): Repetition of Bicep Curl variations and Tricep exercises with similar movement patterns (Tricep Pushdown, Overhead Dumbbell Extension, Skull Crusher).\n",
      "\n",
      "4. **Format Consistency**:\n",
      "   - Each exercise includes the required information: name, primary muscles, secondary muscles, sets, and reps.\n",
      "\n",
      "**How to Fix:**\n",
      "\n",
      "1. **Reorganize the workout days** to strictly follow the muscle group days and ensure the correct number of exercises per muscle group.\n",
      "2. **Increase variety** within each muscle group day by including diverse exercises that target different movement patterns and muscle groups.\n",
      "3. **Ensure that each listed body part** targets both primary and secondary muscle groups effectively.\n",
      "4. **Review and adjust** the distribution of exercises across days to avoid repetition and ensure balanced muscle development.\n",
      "\n",
      "By addressing these issues, the workout plan can be made more comprehensive, varied, and effective.\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_exercises (call_geb7)\n",
      " Call ID: call_geb7\n",
      "  Args:\n",
      "    body_part: Back\n",
      "    primary_muscles: Latissimus Dorsi\n",
      "    secondary_muscles: Trapezius\n",
      "    exercises_number: 5\n",
      "  get_exercises (call_9hhh)\n",
      " Call ID: call_9hhh\n",
      "  Args:\n",
      "    body_part: Chest\n",
      "    primary_muscles: Pectoralis Major\n",
      "    secondary_muscles: Anterior Deltoids\n",
      "    exercises_number: 5\n",
      "  get_exercises (call_mf50)\n",
      " Call ID: call_mf50\n",
      "  Args:\n",
      "    body_part: Arms\n",
      "    primary_muscles: Biceps Brachii\n",
      "    secondary_muscles: Triceps Brachii\n",
      "    exercises_number: 6\n",
      "  get_exercises (call_20ax)\n",
      " Call ID: call_20ax\n",
      "  Args:\n",
      "    body_part: Core\n",
      "    primary_muscles: Abdominals\n",
      "    secondary_muscles: Obliques\n",
      "    exercises_number: 2\n",
      "  get_exercises (call_wt1k)\n",
      " Call ID: call_wt1k\n",
      "  Args:\n",
      "    body_part: Shoulders\n",
      "    primary_muscles: Deltoids\n",
      "    secondary_muscles: Trapezius\n",
      "    exercises_number: 5\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: get_exercises\n",
      "\n",
      "Found these exercises:\n",
      "1. Dumbbell Shoulder Press\n",
      "   Primary: ['Deltoids']\n",
      "   Secondary: ['Trapezius', 'Triceps', 'Upper Chest']\n",
      " 2. Kettlebell Shoulder Press\n",
      "   Primary: ['Deltoids', 'Serratus Anterior']\n",
      "   Secondary: ['Traps', 'Triceps', 'Upper Trapezius']\n",
      " 3. Barbell Front Raise\n",
      "   Primary: ['Anterior Deltoids']\n",
      "   Secondary: ['Lateral Deltoids', 'Trapezius', 'Upper Chest']\n",
      " 4. Cable Front Raise\n",
      "   Primary: ['Anterior Deltoids']\n",
      "   Secondary: ['Upper Chest', 'Trapezius', 'Biceps']\n",
      " 5. Cable Reverse Fly\n",
      "   Primary: ['Rear Deltoids', 'Rhomboids']\n",
      "   Secondary: ['Lateral Deltoid', 'Trapezius', 'Rotator cuff muscles']\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Based on the provided information and the exercises found, I will create a 5-day workout plan for you. \n",
      "\n",
      "**Day 1: Back**\n",
      "\n",
      "1. Chin-Ups\n",
      "   Primary: Latissimus Dorsi\n",
      "   Secondary: Biceps, Trapezius, Rhomboids, Shoulders, Forearms\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Behind-the-Neck Pulldown\n",
      "   Primary: Latissimus Dorsi\n",
      "   Secondary: Lower Trapezius\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Bent-Over Barbell Rows\n",
      "   Primary: Latissimus Dorsi, Trapezius, Rhomboids\n",
      "   Secondary: Biceps, Forearms, Erector Spinae\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "4. Seated Cable Rows\n",
      "   Primary: Latissimus Dorsi, Trapezius, Rhomboids\n",
      "   Secondary: Biceps, Forearms, Erector Spinae\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Deadlifts\n",
      "   Primary: Latissimus Dorsi, Trapezius, Rhomboids, Glutes, Hamstrings\n",
      "   Secondary: Erector Spinae, Forearms, Core\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "\n",
      "**Day 2: Chest**\n",
      "\n",
      "1. Barbell Bench Press\n",
      "   Primary: Pectoralis Major\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Incline Barbell Bench Press\n",
      "   Primary: Upper Pectoralis Major\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Decline Dumbbell Bench Press\n",
      "   Primary: Pectoralis Major, Triceps\n",
      "   Secondary: Anterior Deltoids, Glutes, Abdominal muscles\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Cable Chest Flys\n",
      "   Primary: Pectoralis Major, Pectoralis Minor\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "5. Dumbbell Chest Press\n",
      "   Primary: Pectoralis Major\n",
      "   Secondary: Anterior Deltoids, Triceps\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "**Day 3: Shoulders**\n",
      "\n",
      "1. Dumbbell Shoulder Press\n",
      "   Primary: Deltoids\n",
      "   Secondary: Trapezius, Triceps, Upper Chest\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Kettlebell Shoulder Press\n",
      "   Primary: Deltoids, Serratus Anterior\n",
      "   Secondary: Traps, Triceps, Upper Trapezius\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Barbell Front Raise\n",
      "   Primary: Anterior Deltoids\n",
      "   Secondary: Lateral Deltoids, Trapezius, Upper Chest\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Cable Front Raise\n",
      "   Primary: Anterior Deltoids\n",
      "   Secondary: Upper Chest, Trapezius, Biceps\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Cable Reverse Fly\n",
      "   Primary: Rear Deltoids, Rhomboids\n",
      "   Secondary: Lateral Deltoid, Trapezius, Rotator cuff muscles\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "\n",
      "**Day 4: Legs**\n",
      "\n",
      "1. Front Squat\n",
      "   Primary: Quadriceps, Glutes, Core\n",
      "   Secondary: Hamstrings, Inner thighs, Upper back\n",
      "   Instructions: 3 sets of 8-12 reps\n",
      "2. Hack Squat\n",
      "   Primary: Quadriceps, Glutes\n",
      "   Secondary: Hamstrings, Calves\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Wall Sit\n",
      "   Primary: Quadriceps, Glutes, Calves\n",
      "   Secondary: Hamstrings, Core\n",
      "   Instructions: 3 sets of 60-second hold\n",
      "4. Box Squat\n",
      "   Primary: Quadriceps\n",
      "   Secondary: Hamstrings, Calves, Glutes, Core, Adductors\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Curtsy Lunge\n",
      "   Primary: Quadriceps, Glutes\n",
      "   Secondary: Hamstrings, Core\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "6. Bulgarian Split Squat\n",
      "   Primary: Quadriceps, Glutes\n",
      "   Secondary: Hamstrings, Core\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "\n",
      "**Day 5: Arms and Core**\n",
      "\n",
      "1. Barbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "2. Dumbbell Bicep Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "3. Incline Dumbbell Curl\n",
      "   Primary: Biceps Brachii\n",
      "   Secondary: Brachialis, Forearm muscles, Brachioradialis\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "4. Tricep Pushdown\n",
      "   Primary: Triceps Brachii\n",
      "   Secondary: Anconeus\n",
      "   Instructions: 3 sets of 10-12 reps\n",
      "5. Overhead Dumbbell Extension\n",
      "   Primary: Triceps Brachii\n",
      "   Secondary: Anconeus\n",
      "   Instructions: 3 sets of 12-15 reps\n",
      "6. Plank\n",
      "   Primary: Core\n",
      "   Secondary: None\n",
      "   Instructions: 3 sets of 60-second hold\n",
      "\n",
      "The database returned 21 exercises. There were no answers for 2 exercises.\n",
      "**********************************************************************\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "To evaluate the given workout plan, we will assess it based on the provided criteria.\n",
      "\n",
      "1. **Exercise Count Validation**:\n",
      "   - Back: 5 exercises (Valid)\n",
      "   - Chest: 5 exercises (Valid)\n",
      "   - Shoulders: 5 exercises (Valid)\n",
      "   - Arms: The plan combines Arms and Core into one day. It has 5 exercises for Arms and 1 for Core, totaling 6 exercises. However, the distribution is not as per the criteria since it's combined with Core. (Invalid due to non-compliance with separate day criteria)\n",
      "   - Legs: 6 exercises (Valid)\n",
      "   - Core: The plan has 1 exercise for Core, not 2 as required, and it's combined with Arms. (Invalid)\n",
      "\n",
      "2. **Muscle Group Coverage**:\n",
      "   - Back: Targets Latissimus Dorsi (primary) and includes secondary muscles like Biceps, Trapezius, Rhomboids, and Erector Spinae. Lower back is targeted through Erector Spinae. (Valid)\n",
      "   - Chest: Targets Pectoralis Major (primary) and includes secondary muscles like Anterior Deltoids and Triceps. (Valid)\n",
      "   - Shoulders: Targets Deltoids (primary) and includes various secondary muscles. (Valid)\n",
      "   - Arms: Includes both Biceps and Triceps exercises, covering primary and secondary muscles. (Valid)\n",
      "   - Legs: Includes Quadriceps, Glutes, Hamstrings, and Calves, covering primary and secondary muscles. Lower back is indirectly targeted through some exercises. (Valid)\n",
      "   - Core: Includes Plank, targeting Core. Although it doesn't meet the exercise count, it covers primary muscles. (Partially Valid)\n",
      "\n",
      "3. **Variety & Movement Pattern Check**:\n",
      "   - Back: Includes Chin-Ups, Behind-the-Neck Pulldown, Bent-Over Barbell Rows, Seated Cable Rows, and Deadlifts. Varied exercises with different movement patterns. (Valid)\n",
      "   - Chest: Includes Barbell Bench Press, Incline Barbell Bench Press, Decline Dumbbell Bench Press, Cable Chest Flys, and Dumbbell Chest Press. Varied but includes multiple presses. (Partially Valid, could be improved with different movement patterns)\n",
      "   - Shoulders: Includes Dumbbell Shoulder Press, Kettlebell Shoulder Press, Barbell Front Raise, Cable Front Raise, and Cable Reverse Fly. Varied exercises with different movement patterns. (Valid)\n",
      "   - Arms: Includes Bicep Curls and Tricep exercises with different grips and angles, showing variety. (Valid)\n",
      "   - Legs: Includes Squats, Hack Squat, Wall Sit, Box Squat, Curtsy Lunge, and Bulgarian Split Squat. Varied exercises with different movement patterns. (Valid)\n",
      "\n",
      "4. **Format Consistency**:\n",
      "   - Each exercise includes name, primary muscles, secondary muscles, sets, and reps, maintaining consistency. (Valid)\n",
      "\n",
      "5. **Feedback on Plan**:\n",
      "   - The plan is mostly valid but has a few issues:\n",
      "     - Arms and Core are combined into one day, not meeting the separate day criteria.\n",
      "     - Core has only 1 exercise instead of 2.\n",
      "     - Chest day includes multiple pressing exercises, which could be varied further.\n",
      "\n",
      "Given these observations, the plan is `\"INVALID PLAN\"` due to the following reasons:\n",
      "1. Arms and Core are not on separate days.\n",
      "2. Core has only 1 exercise.\n",
      "3. The Chest day could benefit from more varied movement patterns.\n",
      "\n",
      "To fix these, consider separating Arms and Core into different days and ensure Core has 2 exercises. Additionally, vary the Chest exercises further to include different movement patterns.\n",
      "you are in call model \n"
     ]
    },
    {
     "ename": "InternalServerError",
     "evalue": "Error code: 500 - {'error': {'message': 'Internal Server Error', 'type': 'internal_server_error'}}",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mInternalServerError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[125], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m inputs \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmessages\u001b[39m\u001b[38;5;124m\"\u001b[39m: [(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124muser\u001b[39m\u001b[38;5;124m\"\u001b[39m, INITIAL_PROMPT)]}\n\u001b[1;32m----> 2\u001b[0m \u001b[43mprint_stream\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgraph\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m(\u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstream_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mvalues\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;66;03m# Start chatbot\u001b[39;00m\n",
      "Cell \u001b[1;32mIn[113], line 2\u001b[0m, in \u001b[0;36mprint_stream\u001b[1;34m(stream)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mprint_stream\u001b[39m(stream):\n\u001b[1;32m----> 2\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m s \u001b[38;5;129;01min\u001b[39;00m stream:\n\u001b[0;32m      3\u001b[0m         message \u001b[38;5;241m=\u001b[39m s[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmessages\u001b[39m\u001b[38;5;124m\"\u001b[39m][\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\n\u001b[0;32m      4\u001b[0m         message\u001b[38;5;241m.\u001b[39mpretty_print()\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langgraph\\pregel\\__init__.py:1273\u001b[0m, in \u001b[0;36mPregel.stream\u001b[1;34m(self, input, config, stream_mode, output_keys, interrupt_before, interrupt_after, debug, subgraphs)\u001b[0m\n\u001b[0;32m   1262\u001b[0m     \u001b[38;5;66;03m# Similarly to Bulk Synchronous Parallel / Pregel model\u001b[39;00m\n\u001b[0;32m   1263\u001b[0m     \u001b[38;5;66;03m# computation proceeds in steps, while there are channel updates\u001b[39;00m\n\u001b[0;32m   1264\u001b[0m     \u001b[38;5;66;03m# channel updates from step N are only visible in step N+1\u001b[39;00m\n\u001b[0;32m   1265\u001b[0m     \u001b[38;5;66;03m# channels are guaranteed to be immutable for the duration of the step,\u001b[39;00m\n\u001b[0;32m   1266\u001b[0m     \u001b[38;5;66;03m# with channel updates applied only at the transition between steps\u001b[39;00m\n\u001b[0;32m   1267\u001b[0m     \u001b[38;5;28;01mwhile\u001b[39;00m loop\u001b[38;5;241m.\u001b[39mtick(\n\u001b[0;32m   1268\u001b[0m         input_keys\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39minput_channels,\n\u001b[0;32m   1269\u001b[0m         interrupt_before\u001b[38;5;241m=\u001b[39minterrupt_before_,\n\u001b[0;32m   1270\u001b[0m         interrupt_after\u001b[38;5;241m=\u001b[39minterrupt_after_,\n\u001b[0;32m   1271\u001b[0m         manager\u001b[38;5;241m=\u001b[39mrun_manager,\n\u001b[0;32m   1272\u001b[0m     ):\n\u001b[1;32m-> 1273\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m runner\u001b[38;5;241m.\u001b[39mtick(\n\u001b[0;32m   1274\u001b[0m             loop\u001b[38;5;241m.\u001b[39mtasks\u001b[38;5;241m.\u001b[39mvalues(),\n\u001b[0;32m   1275\u001b[0m             timeout\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstep_timeout,\n\u001b[0;32m   1276\u001b[0m             retry_policy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mretry_policy,\n\u001b[0;32m   1277\u001b[0m             get_waiter\u001b[38;5;241m=\u001b[39mget_waiter,\n\u001b[0;32m   1278\u001b[0m         ):\n\u001b[0;32m   1279\u001b[0m             \u001b[38;5;66;03m# emit output\u001b[39;00m\n\u001b[0;32m   1280\u001b[0m             \u001b[38;5;28;01myield from\u001b[39;00m output()\n\u001b[0;32m   1281\u001b[0m \u001b[38;5;66;03m# emit output\u001b[39;00m\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langgraph\\pregel\\runner.py:56\u001b[0m, in \u001b[0;36mPregelRunner.tick\u001b[1;34m(self, tasks, reraise, timeout, retry_policy, get_waiter)\u001b[0m\n\u001b[0;32m     54\u001b[0m t \u001b[38;5;241m=\u001b[39m tasks[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m     55\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m---> 56\u001b[0m     \u001b[43mrun_with_retry\u001b[49m\u001b[43m(\u001b[49m\u001b[43mt\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretry_policy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     57\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommit(t, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m     58\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m exc:\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langgraph\\pregel\\retry.py:29\u001b[0m, in \u001b[0;36mrun_with_retry\u001b[1;34m(task, retry_policy)\u001b[0m\n\u001b[0;32m     27\u001b[0m task\u001b[38;5;241m.\u001b[39mwrites\u001b[38;5;241m.\u001b[39mclear()\n\u001b[0;32m     28\u001b[0m \u001b[38;5;66;03m# run the task\u001b[39;00m\n\u001b[1;32m---> 29\u001b[0m \u001b[43mtask\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mproc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minvoke\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtask\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minput\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     30\u001b[0m \u001b[38;5;66;03m# if successful, end\u001b[39;00m\n\u001b[0;32m     31\u001b[0m \u001b[38;5;28;01mbreak\u001b[39;00m\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langgraph\\utils\\runnable.py:410\u001b[0m, in \u001b[0;36mRunnableSeq.invoke\u001b[1;34m(self, input, config, **kwargs)\u001b[0m\n\u001b[0;32m    408\u001b[0m context\u001b[38;5;241m.\u001b[39mrun(_set_config_context, config)\n\u001b[0;32m    409\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m i \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m--> 410\u001b[0m     \u001b[38;5;28minput\u001b[39m \u001b[38;5;241m=\u001b[39m context\u001b[38;5;241m.\u001b[39mrun(step\u001b[38;5;241m.\u001b[39minvoke, \u001b[38;5;28minput\u001b[39m, config, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    411\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    412\u001b[0m     \u001b[38;5;28minput\u001b[39m \u001b[38;5;241m=\u001b[39m context\u001b[38;5;241m.\u001b[39mrun(step\u001b[38;5;241m.\u001b[39minvoke, \u001b[38;5;28minput\u001b[39m, config)\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langgraph\\utils\\runnable.py:184\u001b[0m, in \u001b[0;36mRunnableCallable.invoke\u001b[1;34m(self, input, config, **kwargs)\u001b[0m\n\u001b[0;32m    182\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    183\u001b[0m     context\u001b[38;5;241m.\u001b[39mrun(_set_config_context, config)\n\u001b[1;32m--> 184\u001b[0m     ret \u001b[38;5;241m=\u001b[39m context\u001b[38;5;241m.\u001b[39mrun(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunc, \u001b[38;5;28minput\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    185\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(ret, Runnable) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrecurse:\n\u001b[0;32m    186\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m ret\u001b[38;5;241m.\u001b[39minvoke(\u001b[38;5;28minput\u001b[39m, config)\n",
      "Cell \u001b[1;32mIn[122], line 30\u001b[0m, in \u001b[0;36mcall_model\u001b[1;34m(state)\u001b[0m\n\u001b[0;32m     25\u001b[0m         messages[i] \u001b[38;5;241m=\u001b[39m ToolMessage(\n\u001b[0;32m     26\u001b[0m             tool_call_id\u001b[38;5;241m=\u001b[39mmsg\u001b[38;5;241m.\u001b[39mtool_call_id,\n\u001b[0;32m     27\u001b[0m             content\u001b[38;5;241m=\u001b[39mjson\u001b[38;5;241m.\u001b[39mdumps(msg\u001b[38;5;241m.\u001b[39mcontent)\n\u001b[0;32m     28\u001b[0m         )\n\u001b[0;32m     29\u001b[0m messages\u001b[38;5;241m=\u001b[39mmessages[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m10\u001b[39m:]\n\u001b[1;32m---> 30\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[43mllm\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minvoke\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmessages\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     31\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmessages\u001b[39m\u001b[38;5;124m\"\u001b[39m: [response]}\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langchain_core\\runnables\\base.py:5354\u001b[0m, in \u001b[0;36mRunnableBindingBase.invoke\u001b[1;34m(self, input, config, **kwargs)\u001b[0m\n\u001b[0;32m   5348\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minvoke\u001b[39m(\n\u001b[0;32m   5349\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   5350\u001b[0m     \u001b[38;5;28minput\u001b[39m: Input,\n\u001b[0;32m   5351\u001b[0m     config: Optional[RunnableConfig] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   5352\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs: Optional[Any],\n\u001b[0;32m   5353\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Output:\n\u001b[1;32m-> 5354\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbound\u001b[38;5;241m.\u001b[39minvoke(\n\u001b[0;32m   5355\u001b[0m         \u001b[38;5;28minput\u001b[39m,\n\u001b[0;32m   5356\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_merge_configs(config),\n\u001b[0;32m   5357\u001b[0m         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m{\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mkwargs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs},\n\u001b[0;32m   5358\u001b[0m     )\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langchain_core\\language_models\\chat_models.py:286\u001b[0m, in \u001b[0;36mBaseChatModel.invoke\u001b[1;34m(self, input, config, stop, **kwargs)\u001b[0m\n\u001b[0;32m    275\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minvoke\u001b[39m(\n\u001b[0;32m    276\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m    277\u001b[0m     \u001b[38;5;28minput\u001b[39m: LanguageModelInput,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    281\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs: Any,\n\u001b[0;32m    282\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m BaseMessage:\n\u001b[0;32m    283\u001b[0m     config \u001b[38;5;241m=\u001b[39m ensure_config(config)\n\u001b[0;32m    284\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m cast(\n\u001b[0;32m    285\u001b[0m         ChatGeneration,\n\u001b[1;32m--> 286\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgenerate_prompt(\n\u001b[0;32m    287\u001b[0m             [\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_convert_input(\u001b[38;5;28minput\u001b[39m)],\n\u001b[0;32m    288\u001b[0m             stop\u001b[38;5;241m=\u001b[39mstop,\n\u001b[0;32m    289\u001b[0m             callbacks\u001b[38;5;241m=\u001b[39mconfig\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcallbacks\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    290\u001b[0m             tags\u001b[38;5;241m=\u001b[39mconfig\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtags\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    291\u001b[0m             metadata\u001b[38;5;241m=\u001b[39mconfig\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    292\u001b[0m             run_name\u001b[38;5;241m=\u001b[39mconfig\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrun_name\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    293\u001b[0m             run_id\u001b[38;5;241m=\u001b[39mconfig\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrun_id\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m),\n\u001b[0;32m    294\u001b[0m             \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m    295\u001b[0m         )\u001b[38;5;241m.\u001b[39mgenerations[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;241m0\u001b[39m],\n\u001b[0;32m    296\u001b[0m     )\u001b[38;5;241m.\u001b[39mmessage\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langchain_core\\language_models\\chat_models.py:786\u001b[0m, in \u001b[0;36mBaseChatModel.generate_prompt\u001b[1;34m(self, prompts, stop, callbacks, **kwargs)\u001b[0m\n\u001b[0;32m    778\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgenerate_prompt\u001b[39m(\n\u001b[0;32m    779\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m    780\u001b[0m     prompts: \u001b[38;5;28mlist\u001b[39m[PromptValue],\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    783\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs: Any,\n\u001b[0;32m    784\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m LLMResult:\n\u001b[0;32m    785\u001b[0m     prompt_messages \u001b[38;5;241m=\u001b[39m [p\u001b[38;5;241m.\u001b[39mto_messages() \u001b[38;5;28;01mfor\u001b[39;00m p \u001b[38;5;129;01min\u001b[39;00m prompts]\n\u001b[1;32m--> 786\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgenerate(prompt_messages, stop\u001b[38;5;241m=\u001b[39mstop, callbacks\u001b[38;5;241m=\u001b[39mcallbacks, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langchain_core\\language_models\\chat_models.py:643\u001b[0m, in \u001b[0;36mBaseChatModel.generate\u001b[1;34m(self, messages, stop, callbacks, tags, metadata, run_name, run_id, **kwargs)\u001b[0m\n\u001b[0;32m    641\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m run_managers:\n\u001b[0;32m    642\u001b[0m             run_managers[i]\u001b[38;5;241m.\u001b[39mon_llm_error(e, response\u001b[38;5;241m=\u001b[39mLLMResult(generations\u001b[38;5;241m=\u001b[39m[]))\n\u001b[1;32m--> 643\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m e\n\u001b[0;32m    644\u001b[0m flattened_outputs \u001b[38;5;241m=\u001b[39m [\n\u001b[0;32m    645\u001b[0m     LLMResult(generations\u001b[38;5;241m=\u001b[39m[res\u001b[38;5;241m.\u001b[39mgenerations], llm_output\u001b[38;5;241m=\u001b[39mres\u001b[38;5;241m.\u001b[39mllm_output)  \u001b[38;5;66;03m# type: ignore[list-item]\u001b[39;00m\n\u001b[0;32m    646\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m res \u001b[38;5;129;01min\u001b[39;00m results\n\u001b[0;32m    647\u001b[0m ]\n\u001b[0;32m    648\u001b[0m llm_output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_combine_llm_outputs([res\u001b[38;5;241m.\u001b[39mllm_output \u001b[38;5;28;01mfor\u001b[39;00m res \u001b[38;5;129;01min\u001b[39;00m results])\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langchain_core\\language_models\\chat_models.py:633\u001b[0m, in \u001b[0;36mBaseChatModel.generate\u001b[1;34m(self, messages, stop, callbacks, tags, metadata, run_name, run_id, **kwargs)\u001b[0m\n\u001b[0;32m    630\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(messages):\n\u001b[0;32m    631\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    632\u001b[0m         results\u001b[38;5;241m.\u001b[39mappend(\n\u001b[1;32m--> 633\u001b[0m             \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_generate_with_cache(\n\u001b[0;32m    634\u001b[0m                 m,\n\u001b[0;32m    635\u001b[0m                 stop\u001b[38;5;241m=\u001b[39mstop,\n\u001b[0;32m    636\u001b[0m                 run_manager\u001b[38;5;241m=\u001b[39mrun_managers[i] \u001b[38;5;28;01mif\u001b[39;00m run_managers \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    637\u001b[0m                 \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m    638\u001b[0m             )\n\u001b[0;32m    639\u001b[0m         )\n\u001b[0;32m    640\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    641\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m run_managers:\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langchain_core\\language_models\\chat_models.py:851\u001b[0m, in \u001b[0;36mBaseChatModel._generate_with_cache\u001b[1;34m(self, messages, stop, run_manager, **kwargs)\u001b[0m\n\u001b[0;32m    849\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    850\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m inspect\u001b[38;5;241m.\u001b[39msignature(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_generate)\u001b[38;5;241m.\u001b[39mparameters\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrun_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m--> 851\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_generate(\n\u001b[0;32m    852\u001b[0m             messages, stop\u001b[38;5;241m=\u001b[39mstop, run_manager\u001b[38;5;241m=\u001b[39mrun_manager, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[0;32m    853\u001b[0m         )\n\u001b[0;32m    854\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    855\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_generate(messages, stop\u001b[38;5;241m=\u001b[39mstop, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\langchain_groq\\chat_models.py:473\u001b[0m, in \u001b[0;36mChatGroq._generate\u001b[1;34m(self, messages, stop, run_manager, **kwargs)\u001b[0m\n\u001b[0;32m    468\u001b[0m message_dicts, params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_create_message_dicts(messages, stop)\n\u001b[0;32m    469\u001b[0m params \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m    470\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams,\n\u001b[0;32m    471\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m    472\u001b[0m }\n\u001b[1;32m--> 473\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclient\u001b[38;5;241m.\u001b[39mcreate(messages\u001b[38;5;241m=\u001b[39mmessage_dicts, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams)\n\u001b[0;32m    474\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_create_chat_result(response)\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\resources\\chat\\completions.py:287\u001b[0m, in \u001b[0;36mCompletions.create\u001b[1;34m(self, messages, model, frequency_penalty, function_call, functions, logit_bias, logprobs, max_tokens, n, parallel_tool_calls, presence_penalty, response_format, seed, stop, stream, temperature, tool_choice, tools, top_logprobs, top_p, user, extra_headers, extra_query, extra_body, timeout)\u001b[0m\n\u001b[0;32m    146\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcreate\u001b[39m(\n\u001b[0;32m    147\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m    148\u001b[0m     \u001b[38;5;241m*\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    175\u001b[0m     timeout: \u001b[38;5;28mfloat\u001b[39m \u001b[38;5;241m|\u001b[39m httpx\u001b[38;5;241m.\u001b[39mTimeout \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m|\u001b[39m NotGiven \u001b[38;5;241m=\u001b[39m NOT_GIVEN,\n\u001b[0;32m    176\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m ChatCompletion \u001b[38;5;241m|\u001b[39m Stream[ChatCompletionChunk]:\n\u001b[0;32m    177\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    178\u001b[0m \u001b[38;5;124;03m    Creates a model response for the given chat conversation.\u001b[39;00m\n\u001b[0;32m    179\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    285\u001b[0m \u001b[38;5;124;03m      timeout: Override the client-level default timeout for this request, in seconds\u001b[39;00m\n\u001b[0;32m    286\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 287\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_post\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    288\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m/openai/v1/chat/completions\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m    289\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmaybe_transform\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    290\u001b[0m \u001b[43m            \u001b[49m\u001b[43m{\u001b[49m\n\u001b[0;32m    291\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmessages\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mmessages\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    292\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmodel\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    293\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mfrequency_penalty\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mfrequency_penalty\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    294\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mfunction_call\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunction_call\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    295\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mfunctions\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunctions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    296\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mlogit_bias\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mlogit_bias\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    297\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mlogprobs\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mlogprobs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    298\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmax_tokens\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mmax_tokens\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    299\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mn\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    300\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mparallel_tool_calls\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mparallel_tool_calls\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    301\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mpresence_penalty\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mpresence_penalty\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    302\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mresponse_format\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mresponse_format\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    303\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mseed\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mseed\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    304\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstop\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mstop\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    305\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstream\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    306\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtemperature\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mtemperature\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    307\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtool_choice\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mtool_choice\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    308\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtools\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mtools\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    309\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtop_logprobs\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mtop_logprobs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    310\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtop_p\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mtop_p\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    311\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43muser\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43muser\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    312\u001b[0m \u001b[43m            \u001b[49m\u001b[43m}\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    313\u001b[0m \u001b[43m            \u001b[49m\u001b[43mcompletion_create_params\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mCompletionCreateParams\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    314\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    315\u001b[0m \u001b[43m        \u001b[49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmake_request_options\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    316\u001b[0m \u001b[43m            \u001b[49m\u001b[43mextra_headers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mextra_headers\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mextra_query\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mextra_query\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mextra_body\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mextra_body\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\n\u001b[0;32m    317\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    318\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcast_to\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mChatCompletion\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    319\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m    320\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream_cls\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mStream\u001b[49m\u001b[43m[\u001b[49m\u001b[43mChatCompletionChunk\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    321\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\_base_client.py:1244\u001b[0m, in \u001b[0;36mSyncAPIClient.post\u001b[1;34m(self, path, cast_to, body, options, files, stream, stream_cls)\u001b[0m\n\u001b[0;32m   1230\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpost\u001b[39m(\n\u001b[0;32m   1231\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   1232\u001b[0m     path: \u001b[38;5;28mstr\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1239\u001b[0m     stream_cls: \u001b[38;5;28mtype\u001b[39m[_StreamT] \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   1240\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m ResponseT \u001b[38;5;241m|\u001b[39m _StreamT:\n\u001b[0;32m   1241\u001b[0m     opts \u001b[38;5;241m=\u001b[39m FinalRequestOptions\u001b[38;5;241m.\u001b[39mconstruct(\n\u001b[0;32m   1242\u001b[0m         method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpost\u001b[39m\u001b[38;5;124m\"\u001b[39m, url\u001b[38;5;241m=\u001b[39mpath, json_data\u001b[38;5;241m=\u001b[39mbody, files\u001b[38;5;241m=\u001b[39mto_httpx_files(files), \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39moptions\n\u001b[0;32m   1243\u001b[0m     )\n\u001b[1;32m-> 1244\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m cast(ResponseT, \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcast_to\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mopts\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstream_cls\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream_cls\u001b[49m\u001b[43m)\u001b[49m)\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\_base_client.py:936\u001b[0m, in \u001b[0;36mSyncAPIClient.request\u001b[1;34m(self, cast_to, options, remaining_retries, stream, stream_cls)\u001b[0m\n\u001b[0;32m    927\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrequest\u001b[39m(\n\u001b[0;32m    928\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m    929\u001b[0m     cast_to: Type[ResponseT],\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    934\u001b[0m     stream_cls: \u001b[38;5;28mtype\u001b[39m[_StreamT] \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    935\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m ResponseT \u001b[38;5;241m|\u001b[39m _StreamT:\n\u001b[1;32m--> 936\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    937\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcast_to\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcast_to\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    938\u001b[0m \u001b[43m        \u001b[49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    939\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    940\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream_cls\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream_cls\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    941\u001b[0m \u001b[43m        \u001b[49m\u001b[43mremaining_retries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mremaining_retries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    942\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\_base_client.py:1024\u001b[0m, in \u001b[0;36mSyncAPIClient._request\u001b[1;34m(self, cast_to, options, remaining_retries, stream, stream_cls)\u001b[0m\n\u001b[0;32m   1022\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m retries \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_should_retry(err\u001b[38;5;241m.\u001b[39mresponse):\n\u001b[0;32m   1023\u001b[0m     err\u001b[38;5;241m.\u001b[39mresponse\u001b[38;5;241m.\u001b[39mclose()\n\u001b[1;32m-> 1024\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_retry_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1025\u001b[0m \u001b[43m        \u001b[49m\u001b[43minput_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1026\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcast_to\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1027\u001b[0m \u001b[43m        \u001b[49m\u001b[43mretries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1028\u001b[0m \u001b[43m        \u001b[49m\u001b[43merr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mresponse\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1029\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1030\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream_cls\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream_cls\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1031\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1033\u001b[0m \u001b[38;5;66;03m# If the response is streamed then we need to explicitly read the response\u001b[39;00m\n\u001b[0;32m   1034\u001b[0m \u001b[38;5;66;03m# to completion before attempting to access the response text.\u001b[39;00m\n\u001b[0;32m   1035\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m err\u001b[38;5;241m.\u001b[39mresponse\u001b[38;5;241m.\u001b[39mis_closed:\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\_base_client.py:1073\u001b[0m, in \u001b[0;36mSyncAPIClient._retry_request\u001b[1;34m(self, options, cast_to, remaining_retries, response_headers, stream, stream_cls)\u001b[0m\n\u001b[0;32m   1069\u001b[0m \u001b[38;5;66;03m# In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a\u001b[39;00m\n\u001b[0;32m   1070\u001b[0m \u001b[38;5;66;03m# different thread if necessary.\u001b[39;00m\n\u001b[0;32m   1071\u001b[0m time\u001b[38;5;241m.\u001b[39msleep(timeout)\n\u001b[1;32m-> 1073\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1074\u001b[0m \u001b[43m    \u001b[49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1075\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcast_to\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcast_to\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1076\u001b[0m \u001b[43m    \u001b[49m\u001b[43mremaining_retries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mremaining\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1077\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1078\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstream_cls\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream_cls\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1079\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\_base_client.py:1024\u001b[0m, in \u001b[0;36mSyncAPIClient._request\u001b[1;34m(self, cast_to, options, remaining_retries, stream, stream_cls)\u001b[0m\n\u001b[0;32m   1022\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m retries \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_should_retry(err\u001b[38;5;241m.\u001b[39mresponse):\n\u001b[0;32m   1023\u001b[0m     err\u001b[38;5;241m.\u001b[39mresponse\u001b[38;5;241m.\u001b[39mclose()\n\u001b[1;32m-> 1024\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_retry_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1025\u001b[0m \u001b[43m        \u001b[49m\u001b[43minput_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1026\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcast_to\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1027\u001b[0m \u001b[43m        \u001b[49m\u001b[43mretries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1028\u001b[0m \u001b[43m        \u001b[49m\u001b[43merr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mresponse\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1029\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1030\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstream_cls\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream_cls\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1031\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1033\u001b[0m \u001b[38;5;66;03m# If the response is streamed then we need to explicitly read the response\u001b[39;00m\n\u001b[0;32m   1034\u001b[0m \u001b[38;5;66;03m# to completion before attempting to access the response text.\u001b[39;00m\n\u001b[0;32m   1035\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m err\u001b[38;5;241m.\u001b[39mresponse\u001b[38;5;241m.\u001b[39mis_closed:\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\_base_client.py:1073\u001b[0m, in \u001b[0;36mSyncAPIClient._retry_request\u001b[1;34m(self, options, cast_to, remaining_retries, response_headers, stream, stream_cls)\u001b[0m\n\u001b[0;32m   1069\u001b[0m \u001b[38;5;66;03m# In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a\u001b[39;00m\n\u001b[0;32m   1070\u001b[0m \u001b[38;5;66;03m# different thread if necessary.\u001b[39;00m\n\u001b[0;32m   1071\u001b[0m time\u001b[38;5;241m.\u001b[39msleep(timeout)\n\u001b[1;32m-> 1073\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1074\u001b[0m \u001b[43m    \u001b[49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1075\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcast_to\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcast_to\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1076\u001b[0m \u001b[43m    \u001b[49m\u001b[43mremaining_retries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mremaining\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1077\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1078\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstream_cls\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstream_cls\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1079\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Hossa\\miniconda3\\envs\\py310\\lib\\site-packages\\groq\\_base_client.py:1039\u001b[0m, in \u001b[0;36mSyncAPIClient._request\u001b[1;34m(self, cast_to, options, remaining_retries, stream, stream_cls)\u001b[0m\n\u001b[0;32m   1036\u001b[0m         err\u001b[38;5;241m.\u001b[39mresponse\u001b[38;5;241m.\u001b[39mread()\n\u001b[0;32m   1038\u001b[0m     log\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mRe-raising status error\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m-> 1039\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_status_error_from_response(err\u001b[38;5;241m.\u001b[39mresponse) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1041\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_process_response(\n\u001b[0;32m   1042\u001b[0m     cast_to\u001b[38;5;241m=\u001b[39mcast_to,\n\u001b[0;32m   1043\u001b[0m     options\u001b[38;5;241m=\u001b[39moptions,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1047\u001b[0m     retries_taken\u001b[38;5;241m=\u001b[39moptions\u001b[38;5;241m.\u001b[39mget_max_retries(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmax_retries) \u001b[38;5;241m-\u001b[39m retries,\n\u001b[0;32m   1048\u001b[0m )\n",
      "\u001b[1;31mInternalServerError\u001b[0m: Error code: 500 - {'error': {'message': 'Internal Server Error', 'type': 'internal_server_error'}}"
     ]
    }
   ],
   "source": [
    "inputs = {\"messages\": [(\"user\", INITIAL_PROMPT)]}\n",
    "print_stream(graph.stream(inputs, config, stream_mode=\"values\"))\n",
    "# Start chatbot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "intr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what is the back exercises in this plan ?\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "The back exercises in this plan are:\n",
      "\n",
      "1. Bent-Over Barbell Rows (Day2: Back and Biceps)\n",
      "\t* Primary: Latissimus Dorsi, Rhomboids, Trapezius, Lower Back, Middle Back\n",
      "\t* Secondary: Abs, Biceps, Forearms, Upper Back\n",
      "2. Pull-Ups (Day2: Back and Biceps)\n",
      "\t* Primary: Latissimus Dorsi\n",
      "\t* Secondary: Biceps, Trapezius, Rhomboids, Shoulders, Forearms\n",
      "3. Lat Pulldowns (Day2: Back and Biceps)\n",
      "\t* Primary: Latissimus Dorsi\n",
      "\t* Secondary: Biceps, Rhomboids, Trapezius\n",
      "4. Deadlifts (Day3: Legs)\n",
      "\t* Primary: Hamstrings, Glutes, Lower Back\n",
      "\t* Secondary: Quadriceps, Core, Trapezius, Rhomboids\n",
      "\n",
      "These exercises target the major muscle groups of the back, including the latissimus dorsi, trapezius, rhomboids, and lower back muscles.\n"
     ]
    }
   ],
   "source": [
    "inputs = {\"messages\": [(\"user\", \"what are the back exercises in this plan ?\")] }\n",
    "print_stream(graph.stream(inputs, config, stream_mode=\"values\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found these exercises:\n",
      "1. Incline Dumbbell Curl\n",
      "   Primary: ['Biceps Brachii']\n",
      "   Secondary: ['Brachialis', 'Forearm muscles', 'Brachioradialis']\n",
      " 2. Concentration Curl\n",
      "   Primary: ['Biceps Brachii']\n",
      "   Secondary: ['Brachialis', 'Brachioradialis', 'Forearm']\n",
      " 3. Reverse Curl (Barbell or Dumbbell)\n",
      "   Primary: ['Biceps Brachii', 'Brachialis', 'Brachioradialis']\n",
      "   Secondary: ['Forearm Flexors', 'Triceps']\n",
      " 4. EZ Bar Curl\n",
      "   Primary: ['Biceps Brachii']\n",
      "   Secondary: ['Brachialis', 'Brachioradialis', 'Forearms']\n",
      " 5. Zottman Curl\n",
      "   Primary: ['Biceps brachii']\n",
      "   Secondary: ['Brachialis', 'Brachioradialis', 'Forearm flexors and extensors']\n"
     ]
    }
   ],
   "source": [
    "response=get_exercises.invoke({\"body_part\": \"Arm\", \"primary_muscles\": \"Triceps \", \"secondary_muscles\": \"Forearm \"})\n",
    "\n",
    "formatted = response.replace(\"\\\\n\", \"\\n\")\n",
    "print(formatted)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Interrupt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[51], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mInterrupt\u001b[49m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'Interrupt' is not defined"
     ]
    }
   ],
   "source": [
    "Interrupt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "latexcode=\"\"\" **Day1: Chest and Triceps**\n",
    "\n",
    "1. Barbell Bench Press\n",
    "* Primary: Pectoralis Major\n",
    "* Secondary: Anterior Deltoids, Triceps\n",
    "* Sets:4\n",
    "* Reps:8-12\n",
    "2. Incline Dumbbell Press\n",
    "* Primary: Upper Pectoralis Major\n",
    "* Secondary: Anterior Deltoids, Triceps\n",
    "* Sets:3\n",
    "* Reps:10-15\n",
    "3. Triceps Rope Pushdown\n",
    "* Primary: Triceps Brachii\n",
    "* Secondary: none\n",
    "* Sets:3\n",
    "* Reps:12-15\n",
    "4. Skull Crushers\n",
    "* Primary: Triceps Brachii\n",
    "* Secondary: none\n",
    "* Sets:3\n",
    "* Reps:8-12\n",
    "5. Triceps Dips\n",
    "* Primary: Triceps Brachii\n",
    "* Secondary: Shoulders\n",
    "* Sets:3\n",
    "* Reps:12-15\n",
    "\n",
    "**Day2: Back and Biceps**\n",
    "\n",
    "1. Bent-Over Barbell Rows\n",
    "* Primary: Latissimus Dorsi, Rhomboids, Trapezius, Lower Back, Middle Back\n",
    "* Secondary: Abs, Biceps, Forearms, Upper Back\n",
    "* Sets:4\n",
    "* Reps:8-12\n",
    "2. Pull-Ups\n",
    "* Primary: Latissimus Dorsi\n",
    "* Secondary: Biceps, Trapezius, Rhomboids, Shoulders, Forearms\n",
    "* Sets:3\n",
    "* Reps:8-12\n",
    "3. Lat Pulldowns\n",
    "* Primary: Latissimus Dorsi\n",
    "* Secondary: Biceps, Rhomboids, Trapezius\n",
    "* Sets:3\n",
    "* Reps:10-12\n",
    "4. Dumbbell Bicep Curl\n",
    "* Primary: Biceps Brachii\n",
    "* Secondary: Brachialis, Brachioradialis\n",
    "* Sets:3\n",
    "* Reps:10-15\n",
    "\n",
    "**Day3: Legs**\n",
    "\n",
    "1. Back Squat\n",
    "* Primary: Quadriceps, Hamstrings, Glutes\n",
    "* Secondary: Back, Core, Shoulders, Arms\n",
    "* Sets:4\n",
    "* Reps:8-12\n",
    "2. Deadlifts\n",
    "* Primary: Hamstrings, Glutes, Lower Back\n",
    "* Secondary: Quadriceps, Core, Trapezius, Rhomboids\n",
    "* Sets:3\n",
    "* Reps:8-12\n",
    "3. Bulgarian Split Squat\n",
    "* Primary: Quadriceps, Glutes, Hamstrings\n",
    "* Secondary: Hip Flexors\n",
    "* Sets:3\n",
    "* Reps:10-15 per leg\n",
    "4. Leg Extension\n",
    "* Primary: Quadriceps\n",
    "* Secondary: none\n",
    "* Sets:3\n",
    "* Reps:12-15\n",
    "5. Leg Curl\n",
    "* Primary: Hamstrings\n",
    "* Secondary: none\n",
    "* Sets:3\n",
    "* Reps:10-15\n",
    "6. Calf Raise\n",
    "* Primary: Gastrocnemius, Soleus\n",
    "* Secondary: none\n",
    "* Sets:3\n",
    "* Reps:12-15\n",
    "\n",
    "**Day4: Shoulders and Abs**\n",
    "\n",
    "1. Standing Military Press\n",
    "* Primary: Deltoids\n",
    "* Secondary: Triceps, Core\n",
    "* Sets:4\n",
    "* Reps:8-12\n",
    "2. Front Raises\n",
    "* Primary: Anterior Deltoids\n",
    "* Secondary: none\n",
    "* Sets:3\n",
    "* Reps:10-15\n",
    "3. Lateral Raises\n",
    "* Primary: Deltoids\n",
    "* Secondary: Trapezius, Shoulders\n",
    "* Sets:3\n",
    "* Reps:12-15\n",
    "4. Reverse Fly\n",
    "* Primary: Rear Deltoids\n",
    "* Secondary: Trapezius, Rhomboids\n",
    "* Sets:3\n",
    "* Reps:12-15\n",
    "5. Russian Twists\n",
    "* Primary: Obliques\n",
    "* Secondary: Core\n",
    "* Sets:3\n",
    "* Reps:12-15 per side\n",
    "6. Plank\n",
    "* Primary: Core\n",
    "* Secondary: Shoulders, Back\n",
    "* Sets:3\n",
    "* Hold:30-60 seconds\n",
    "\n",
    "**Day5: Arms**\n",
    "\n",
    "1. Triceps Kickback\n",
    "* Primary: Triceps Brachii\n",
    "* Secondary: none\n",
    "* Sets:3\n",
    "* Reps:12-15\n",
    "2. Close-Grip Bench Press\n",
    "* Primary: Triceps Brachii\n",
    "* Secondary: Chest, Shoulders\n",
    "* Sets:3\n",
    "* Reps:8-12\n",
    "3. Hammer Curl\n",
    "* Primary: Biceps Brachii, Brachialis\n",
    "* Secondary: Brachioradialis, Forearm muscles\n",
    "* Sets:3\n",
    "* Reps:10-15\n",
    "4. Preacher Curl\n",
    "* Primary: Biceps Brachii\n",
    "* Secondary: Brachialis\n",
    "* Sets:3\n",
    "* Reps:10-15\n",
    "5. Incline Dumbbell Curl\n",
    "* Primary: Biceps Brachii\n",
    "* Secondary: Brachialis, Brachioradialis\n",
    "* Sets:3\n",
    "* Reps:10-15\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "latex_code=llm_pure.invoke(latexcode+\"turn this into latex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Here is the workout plan in LaTeX format:\\n\\n```latex\\n\\\\documentclass{article}\\n\\\\usepackage[margin=1in]{geometry}\\n\\\\usepackage{enumitem}\\n\\n\\\\begin{document}\\n\\n\\\\section*{Workout Plan}\\n\\nThe following is a 5-day workout plan, targeting different muscle groups each day.\\n\\n\\\\subsection*{Day 1: Chest and Triceps}\\n\\n\\\\begin{enumerate}[label=\\\\arabic*.]\\n    \\\\item \\\\textbf{Barbell Bench Press}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Pectoralis Major\\n        \\\\item Secondary: Anterior Deltoids, Triceps\\n        \\\\item Sets: 4\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Incline Dumbbell Press}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Upper Pectoralis Major\\n        \\\\item Secondary: Anterior Deltoids, Triceps\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Triceps Rope Pushdown}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Triceps Brachii\\n        \\\\item Secondary: none\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Skull Crushers}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Triceps Brachii\\n        \\\\item Secondary: none\\n        \\\\item Sets: 3\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Triceps Dips}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Triceps Brachii\\n        \\\\item Secondary: Shoulders\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15\\n    \\\\end{itemize}\\n\\\\end{enumerate}\\n\\n\\\\subsection*{Day 2: Back and Biceps}\\n\\n\\\\begin{enumerate}[label=\\\\arabic*.]\\n    \\\\item \\\\textbf{Bent-Over Barbell Rows}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Latissimus Dorsi, Rhomboids, Trapezius, Lower Back, Middle Back\\n        \\\\item Secondary: Abs, Biceps, Forearms, Upper Back\\n        \\\\item Sets: 4\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Pull-Ups}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Latissimus Dorsi\\n        \\\\item Secondary: Biceps, Trapezius, Rhomboids, Shoulders, Forearms\\n        \\\\item Sets: 3\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Lat Pulldowns}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Latissimus Dorsi\\n        \\\\item Secondary: Biceps, Rhomboids, Trapezius\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Dumbbell Bicep Curl}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Biceps Brachii\\n        \\\\item Secondary: Brachialis, Brachioradialis\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15\\n    \\\\end{itemize}\\n\\\\end{enumerate}\\n\\n\\\\subsection*{Day 3: Legs}\\n\\n\\\\begin{enumerate}[label=\\\\arabic*.]\\n    \\\\item \\\\textbf{Back Squat}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Quadriceps, Hamstrings, Glutes\\n        \\\\item Secondary: Back, Core, Shoulders, Arms\\n        \\\\item Sets: 4\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Deadlifts}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Hamstrings, Glutes, Lower Back\\n        \\\\item Secondary: Quadriceps, Core, Trapezius, Rhomboids\\n        \\\\item Sets: 3\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Bulgarian Split Squat}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Quadriceps, Glutes, Hamstrings\\n        \\\\item Secondary: Hip Flexors\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15 per leg\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Leg Extension}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Quadriceps\\n        \\\\item Secondary: none\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Leg Curl}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Hamstrings\\n        \\\\item Secondary: none\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Calf Raise}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Gastrocnemius, Soleus\\n        \\\\item Secondary: none\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15\\n    \\\\end{itemize}\\n\\\\end{enumerate}\\n\\n\\\\subsection*{Day 4: Shoulders and Abs}\\n\\n\\\\begin{enumerate}[label=\\\\arabic*.]\\n    \\\\item \\\\textbf{Standing Military Press}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Deltoids\\n        \\\\item Secondary: Triceps, Core\\n        \\\\item Sets: 4\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Front Raises}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Anterior Deltoids\\n        \\\\item Secondary: none\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Lateral Raises}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Deltoids\\n        \\\\item Secondary: Trapezius, Shoulders\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Reverse Fly}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Rear Deltoids\\n        \\\\item Secondary: Trapezius, Rhomboids\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Russian Twists}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Obliques\\n        \\\\item Secondary: Core\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15 per side\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Plank}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Core\\n        \\\\item Secondary: Shoulders, Back\\n        \\\\item Sets: 3\\n        \\\\item Hold: 30-60 seconds\\n    \\\\end{itemize}\\n\\\\end{enumerate}\\n\\n\\\\subsection*{Day 5: Arms}\\n\\n\\\\begin{enumerate}[label=\\\\arabic*.]\\n    \\\\item \\\\textbf{Triceps Kickback}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Triceps Brachii\\n        \\\\item Secondary: none\\n        \\\\item Sets: 3\\n        \\\\item Reps: 12-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Close-Grip Bench Press}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Triceps Brachii\\n        \\\\item Secondary: Chest, Shoulders\\n        \\\\item Sets: 3\\n        \\\\item Reps: 8-12\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Hammer Curl}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Biceps Brachii, Brachialis\\n        \\\\item Secondary: Brachioradialis, Forearm muscles\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Preacher Curl}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Biceps Brachii\\n        \\\\item Secondary: Brachialis\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15\\n    \\\\end{itemize}\\n    \\\\item \\\\textbf{Incline Dumbbell Curl}\\n    \\\\begin{itemize}\\n        \\\\item Primary: Biceps Brachii\\n        \\\\item Secondary: Brachialis, Brachioradialis\\n        \\\\item Sets: 3\\n        \\\\item Reps: 10-15\\n    \\\\end{itemize}\\n\\\\end{enumerate}\\n\\n\\\\end{document}\\n```\\n\\nTo compile this LaTeX code, save it to a file with a `.tex` extension (e.g., `workout_plan.tex`) and run `pdflatex workout_plan.tex` in your terminal or command prompt. This will generate a PDF file (`workout_plan.pdf`) containing the workout plan.'"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex_code.content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what are the leg exercises in this plan ?\n",
      "you are in call model \n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "The leg exercises in this plan are:\n",
      "\n",
      "1. **Squats** (Day3)\n",
      " - Primary: Quadriceps, Hamstrings, Glutes\n",
      " - Secondary: Back, Core, Shoulders\n",
      "2. **Leg Press** (Day3)\n",
      " - Primary: Quadriceps, Hamstrings, Glutes\n",
      " - Secondary: Calf Muscles\n",
      "3. **Lunges** (Day3)\n",
      " - Primary: Quadriceps, Hamstrings, Glutes\n",
      " - Secondary: Core\n",
      "4. **Leg Extensions** (Day3)\n",
      " - Primary: Quadriceps\n",
      " - Secondary: None\n",
      "5. **Leg Curls** (Day3)\n",
      " - Primary: Hamstrings\n",
      " - Secondary: None\n",
      "6. **Deadlifts** (Day5)\n",
      " - Primary: Hamstrings, Glutes, Lower Back\n",
      " - Secondary: Quadriceps, Core, Trapezius\n",
      "\n",
      "These exercises target the major muscle groups in the legs, including quadriceps, hamstrings, and glutes.\n"
     ]
    }
   ],
   "source": [
    "inputs = {\"messages\": [(\"user\", \"what are the leg exercises in this plan ?\")] }\n",
    "print_stream(graph.stream(inputs, config, stream_mode=\"values\"))\n",
    "# Start chatbot \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "RunnableBindingBase.invoke() missing 1 required positional argument: 'input'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m latex_code\u001b[38;5;241m=\u001b[39m\u001b[43mllm\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minvoke\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mTypeError\u001b[0m: RunnableBindingBase.invoke() missing 1 required positional argument: 'input'"
     ]
    }
   ],
   "source": [
    "latex_code=llm.invoke()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'```latex\\ndocumentclass{article}\\nusepackage[margin=1in]{geometry}\\nusepackage{enumitem}\\n\\nbegin{document}\\n\\nsection*{5-Day Workout Plan for Getting Lean Muscle}\\n\\nsubsection*{Day1: Chest and Triceps}\\n\\nbegin{enumerate}[label=arabic*.]\\n item textbf{Barbell Bench Press}\\n begin{itemize}\\n item Primary: Pectoralis Major\\n item Secondary: Anterior Deltoids, Triceps\\n item Sets:4\\n item Reps:8-12\\n end{itemize}\\n item textbf{Incline Dumbbell Press}\\n begin{itemize}\\n item Primary: Upper Pectoralis Major\\n item Secondary: Anterior Deltoids, Triceps\\n item Sets:3\\n item Reps:10-12\\n end{itemize}\\n item textbf{Triceps Pushdown}\\n begin{itemize}\\n item Primary: Triceps Brachii\\n item Secondary: None\\n item Sets:3\\n item Reps:12-15\\n end{itemize}\\n item textbf{Overhead Dumbbell Extension}\\n begin{itemize}\\n item Primary: Triceps Brachii\\n item Secondary: None\\n item Sets:3\\n item Reps:12-15\\n end{itemize}\\nend{enumerate}\\n\\nsubsection*{Day2: Back and Biceps}\\n\\nbegin{enumerate}[label=arabic*.]\\n item textbf{Pull-Ups}\\n begin{itemize}\\n item Primary: Latissimus Dorsi\\n item Secondary: Biceps, Trapezius, Rhomboids\\n item Sets:4\\n item Reps:8-12\\n end{itemize}\\n item textbf{Barbell Rows}\\n begin{itemize}\\n item Primary: Latissimus Dorsi, Rhomboids, Trapezius\\n item Secondary: Biceps, Forearms\\n item Sets:4\\n item Reps:8-12\\n end{itemize}\\n item textbf{Dumbbell Bicep Curl}\\n begin{itemize}\\n item Primary: Biceps Brachii\\n item Secondary: Brachialis, Brachioradialis\\n item Sets:3\\n item Reps:10-12\\n end{itemize}\\n item textbf{Hammer Curl}\\n begin{itemize}\\n item Primary: Biceps Brachii\\n item Secondary: Brachialis\\n item Sets:3\\n item Reps:10-12\\n end{itemize}\\nend{enumerate}\\n\\nsubsection*{Day3: Legs}\\n\\nbegin{enumerate}[label=arabic*.]\\n item textbf{Squats}\\n begin{itemize}\\n item Primary: Quadriceps, Hamstrings, Glutes\\n item Secondary: Core, Lower Back\\n item Sets:4\\n item Reps:8-12\\n end{itemize}\\n item textbf{Leg Press}\\n begin{itemize}\\n item Primary: Quadriceps, Hamstrings, Glutes\\n item Secondary: Calves\\n item Sets:4\\n item Reps:8-12\\n end{itemize}\\n item textbf{Lunges}\\n begin{itemize}\\n item Primary: Quadriceps, Hamstrings, Glutes\\n item Secondary: Core\\n item Sets:3\\n item Reps:10-12 per leg\\n end{itemize}\\n item textbf{Leg Extensions}\\n begin{itemize}\\n item Primary: Quadriceps\\n item Secondary: None\\n item Sets:3\\n item Reps:12-15\\n end{itemize}\\n item textbf{Leg Curls}\\n begin{itemize}\\n item Primary: Hamstrings\\n item Secondary: None\\n item Sets:3\\n item Reps:10-12\\n end{itemize}\\nend{enumerate}\\n\\nsubsection*{Day4: Shoulders and Abs}\\n\\nbegin{enumerate}[label=arabic*.]\\n item textbf{Standing Military Press}\\n begin{itemize}\\n item Primary: Deltoids\\n item Secondary: Triceps, Upper Chest\\n item Sets:4\\n item Reps:8-12\\n end{itemize}\\n item textbf{Lateral Raises}\\n begin{itemize}\\n item Primary: Deltoids (Lateral)\\n item Secondary: Trapezius\\n item Sets:3\\n item Reps:10-12\\n end{itemize}\\n item textbf{Rear Delt Fly}\\n begin{itemize}\\n item Primary: Rear Deltoids\\n item Secondary: Trapezius, Rhomboids\\n item Sets:3\\n item Reps:12-15\\n end{itemize}\\n item textbf{Plank}\\n begin{itemize}\\n item Primary: Core\\n item Secondary: Shoulders, Back\\n item Sets:3\\n item Duration:30-60 seconds\\n end{itemize}\\n item textbf{Russian Twists}\\n begin{itemize}\\n item Primary: Obliques\\n item Secondary: None\\n item Sets:3\\n item Reps:15-20 per side\\n end{itemize}\\nend{enumerate}\\n\\nsubsection*{Day5: Arms and Lower Back}\\n\\nbegin{enumerate}[label=arabic*.]\\n item textbf{Bench Dips}\\n begin{itemize}\\n item Primary: Triceps Brachii\\n item Secondary: Chest\\n item Sets:3\\n item Reps:10-12\\n end{itemize}\\n item textbf{Concentration Curls}\\n begin{itemize}\\n item Primary: Biceps Brachii\\n item Secondary: Brachialis\\n item Sets:3\\n item Reps:10-12\\n end{itemize}\\n item textbf{Deadlifts}\\n begin{itemize}\\n item Primary: Latissimus Dorsi, Erector Spinae\\n item Secondary: Glutes, Hamstrings, Core\\n item Sets:4\\n item Reps:8-12\\n end{itemize}\\n item textbf{Superman}\\n begin{itemize}\\n item Primary: Erector Spinae\\n item Secondary: Glutes\\n item Sets:3\\n item Reps:12-15\\n end{itemize}\\nend{enumerate}\\n\\nsubsection*{Summary:}\\nbegin{itemize}\\n item The database returned exercises for the following queries: Back (10 exercises), Arms (10 exercises), Chest (5 exercises), Shoulders (5 exercises), Legs (10 exercises), and Core (2 exercises).\\n item Total exercises returned:42\\n item Total exercises not found:1 (for Core)\\nend{itemize}\\n\\nsubsection*{Adjustments:}\\nbegin{itemize}\\n item Replaced Bicep Curls on Day5 with Concentration Curls to increase variety.\\n item Ensured a balanced development across all muscle groups.\\nend{itemize}\\n\\nsubsection*{Notes:}\\nbegin{itemize}\\n item Ensure proper form and technique for each exercise.\\n item Adjust weights according to your fitness level and goals.\\n item Rest for60-90 seconds between sets, and120-180 seconds between exercises.\\n item Stay hydrated and maintain a balanced diet to support your fitness goals.\\nend{itemize}\\n\\nend{document}\\n```'"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex_code.content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Compiling LaTeX file...\n",
      "LaTeX compilation successful.\n",
      "pdflatex output:\n",
      "This is pdfTeX, Version 3.141592653-2.6-1.40.25 (MiKTeX 24.1) (preloaded format=pdflatex.fmt)\n",
      " restricted \\write18 enabled.\n",
      "entering extended mode\n",
      "(output2.tex\n",
      "LaTeX2e <2023-11-01> patch level 1\n",
      "L3 programming layer <2024-01-04>\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/base\\article.cls\n",
      "Document Class: article 2023/05/17 v1.4n Standard LaTeX document class\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/base\\size10.clo))\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/amsmath\\amsmath.sty\n",
      "For additional information on amsmath, use the `?' option.\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/amsmath\\amstext.sty\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/amsmath\\amsgen.sty))\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/amsmath\\amsbsy.sty)\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/amsmath\\amsopn.sty))\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/amsfonts\\amsfonts.sty)\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/amsfonts\\amssymb.sty)\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/geometry\\geometry.sty\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/graphics\\keyval.sty)\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/generic/iftex\\ifvtex.sty\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/generic/iftex\\iftex.sty))\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/geometry\\geometry.cfg))\n",
      "\n",
      "(C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\tex/latex/l3backend\\l3backend-pdf\n",
      "tex.def) (output2.aux)\n",
      "*geometry* driver: auto-detecting\n",
      "*geometry* detected driver: pdftex\n",
      "[1{C:/Users/Hossa/AppData/Local/MiKTeX/fonts/map/pdftex/pdftex.map}] [2]\n",
      "[3] [4] (output2.aux) ) <C:\\Users\\Hossa\\AppData\\Local\\MiKTeX\\fonts/pk/ljfour/jk\n",
      "nappen/ec/dpi600\\tcrm1000.pk><C:/Users/Hossa/AppData/Local/Programs/MiKTeX/font\n",
      "s/type1/public/amsfonts/cm/cmbx10.pfb><C:/Users/Hossa/AppData/Local/Programs/Mi\n",
      "KTeX/fonts/type1/public/amsfonts/cm/cmbx12.pfb><C:/Users/Hossa/AppData/Local/Pr\n",
      "ograms/MiKTeX/fonts/type1/public/amsfonts/cm/cmr10.pfb>\n",
      "Output written on output2.pdf (4 pages, 60011 bytes).\n",
      "Transcript written on output2.log.\n",
      "\n",
      "pdflatex errors/warnings:\n",
      "pdflatex: major issue: So far, you have not checked for MiKTeX updates.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import subprocess\n",
    "import os\n",
    "\n",
    "latex_code = r\"\"\"\\documentclass{article}\n",
    "\\usepackage{amsmath}\n",
    "\\usepackage{amsfonts}\n",
    "\\usepackage{amssymb}\n",
    "\\usepackage{geometry}\n",
    "\\geometry{a4paper, margin=1in}\n",
    "\\begin{document}\n",
    "\n",
    "\\section*{5-Day Workout Plan}\n",
    "\n",
    "\\subsection*{Day 1: Chest and Triceps}\n",
    "\\begin{enumerate}\n",
    "    \\item \\textbf{Barbell Bench Press}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Pectoralis Major\n",
    "        \\item Secondary: Anterior Deltoids, Triceps\n",
    "        \\item Sets: 4\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Incline Dumbbell Press}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Upper Pectoralis Major\n",
    "        \\item Secondary: Anterior Deltoids, Triceps\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Triceps Rope Pushdown}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Triceps Brachii\n",
    "        \\item Secondary: none\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Skull Crushers}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Triceps Brachii\n",
    "        \\item Secondary: none\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Triceps Dips}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Triceps Brachii\n",
    "        \\item Secondary: Shoulders\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15\n",
    "    \\end{itemize}\n",
    "\\end{enumerate}\n",
    "\n",
    "\\subsection*{Day 2: Back and Biceps}\n",
    "\\begin{enumerate}\n",
    "    \\item \\textbf{Bent-Over Barbell Rows}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Latissimus Dorsi, Rhomboids, Trapezius, Lower Back, Middle Back\n",
    "        \\item Secondary: Abs, Biceps, Forearms, Upper Back\n",
    "        \\item Sets: 4\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Pull-Ups}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Latissimus Dorsi\n",
    "        \\item Secondary: Biceps, Trapezius, Rhomboids, Shoulders, Forearms\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Lat Pulldowns}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Latissimus Dorsi\n",
    "        \\item Secondary: Biceps, Rhomboids, Trapezius\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Dumbbell Bicep Curl}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Biceps Brachii\n",
    "        \\item Secondary: Brachialis, Brachioradialis\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15\n",
    "    \\end{itemize}\n",
    "\\end{enumerate}\n",
    "\n",
    "\\subsection*{Day 3: Legs}\n",
    "\\begin{enumerate}\n",
    "    \\item \\textbf{Back Squat}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Quadriceps, Hamstrings, Glutes\n",
    "        \\item Secondary: Back, Core, Shoulders, Arms\n",
    "        \\item Sets: 4\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Deadlifts}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Hamstrings, Glutes, Lower Back\n",
    "        \\item Secondary: Quadriceps, Core, Trapezius, Rhomboids\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Bulgarian Split Squat}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Quadriceps, Glutes, Hamstrings\n",
    "        \\item Secondary: Hip Flexors\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15 per leg\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Leg Extension}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Quadriceps\n",
    "        \\item Secondary: none\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Leg Curl}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Hamstrings\n",
    "        \\item Secondary: none\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Calf Raise}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Gastrocnemius, Soleus\n",
    "        \\item Secondary: none\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15\n",
    "    \\end{itemize}\n",
    "\\end{enumerate}\n",
    "\n",
    "\\subsection*{Day 4: Shoulders and Abs}\n",
    "\\begin{enumerate}\n",
    "    \\item \\textbf{Standing Military Press}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Deltoids\n",
    "        \\item Secondary: Triceps, Core\n",
    "        \\item Sets: 4\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Front Raises}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Anterior Deltoids\n",
    "        \\item Secondary: none\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Lateral Raises}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Deltoids\n",
    "        \\item Secondary: Trapezius, Shoulders\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Reverse Fly}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Rear Deltoids\n",
    "        \\item Secondary: Trapezius, Rhomboids\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Russian Twists}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Obliques\n",
    "        \\item Secondary: Core\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15 per side\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Plank}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Core\n",
    "        \\item Secondary: Shoulders, Back\n",
    "        \\item Sets: 3\n",
    "        \\item Hold: 30-60 seconds\n",
    "    \\end{itemize}\n",
    "\\end{enumerate}\n",
    "\n",
    "\\subsection*{Day 5: Arms}\n",
    "\\begin{enumerate}\n",
    "    \\item \\textbf{Triceps Kickback}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Triceps Brachii\n",
    "        \\item Secondary: none\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 12-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Close-Grip Bench Press}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Triceps Brachii\n",
    "        \\item Secondary: Chest, Shoulders\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 8-12\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Hammer Curl}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Biceps Brachii, Brachialis\n",
    "        \\item Secondary: Brachioradialis, Forearm muscles\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Preacher Curl}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Biceps Brachii\n",
    "        \\item Secondary: Brachialis\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15\n",
    "    \\end{itemize}\n",
    "    \\item \\textbf{Incline Dumbbell Curl}\n",
    "    \\begin{itemize}\n",
    "        \\item Primary: Biceps Brachii\n",
    "        \\item Secondary: Brachialis, Brachioradialis\n",
    "        \\item Sets: 3\n",
    "        \\item Reps: 10-15\n",
    "    \\end{itemize}\n",
    "\\end{enumerate}\n",
    "\n",
    "\\end{document}\n",
    "\"\"\"\n",
    "with open(\"output2.tex\", \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(latex_code)\n",
    "pdflatex_path = r\"C:\\Users\\Hossa\\AppData\\Local\\Programs\\MiKTeX\\miktex\\bin\\x64\\pdflatex.exe\"\n",
    "try:\n",
    "  \n",
    "    print(\"Compiling LaTeX file...\")\n",
    "    result = subprocess.run([pdflatex_path, \"output2.tex\"], cwd=os.getcwd(), check=True, capture_output=True, text=True)\n",
    "    print(\"LaTeX compilation successful.\")\n",
    "    print(\"pdflatex output:\")\n",
    "    print(result.stdout)\n",
    "    if result.stderr:\n",
    "        print(\"pdflatex errors/warnings:\")\n",
    "        print(result.stderr)\n",
    "\n",
    "except FileNotFoundError:\n",
    "    print(f\"Error: pdflatex executable not found at '{pdflatex_path}'. Please check the path.\")\n",
    "except subprocess.CalledProcessError as e:\n",
    "    print(f\"Error during LaTeX compilation: {e}\")\n",
    "    print(\"pdflatex output:\")\n",
    "    print(e.stdout)\n",
    "    print(\"pdflatex errors/warnings:\")\n",
    "    print(e.stderr)\n",
    "except Exception as e:\n",
    "    print(f\"An unexpected error occurred: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class State(TypedDict):\n",
    "    messages: Annotated[list,add_messages]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class single_exercise(BaseModel):\n",
    "    exercise: str = Field(description=\"exercise name\")\n",
    "    sub_muscles: list [str] = Field(description=\"list of sub_muscle in this exercise\")\n",
    "    primary_muscles:list [ str] = Field(description=\"list of primary muscle in this exercise\")\n",
    "    sets :str = Field(description=\"number of sets\")\n",
    "    reps: str = Field(description=\"number of reps\")\n",
    "    instruction: str = Field(description=\"exercise instruction\")\n",
    "    @property\n",
    "    def summary(self):\n",
    "        return f\"sub_muscle: {self.sub_muscle}, exercise: {self.exercise}, sets: {self.sets}, reps: {self.reps}, details: {self.details}\"\n",
    "class single_body_part(BaseModel):\n",
    "    body_part: str = Field(description=\"name of the body part\")\n",
    "    exercises: List[single_exercise] = Field(description=\"list of exercises in this body part\")\n",
    "    @property\n",
    "    def summary(self):\n",
    "        return f\"body_part: {self.body_part}, exercises: {self.exercises}\"\n",
    "#structed_output_llm=llm.with_structured_output(single_body_part)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain_core.prompts import ChatPromptTemplate\n",
    "\n",
    "# Define the prompt template with proper input variables\n",
    "fitness_instructions = ChatPromptTemplate.from_template(\"\"\"\n",
    "You are tasked with generating a list of exercises for {body_part} that the user needs to train. Follow these instructions carefully:\n",
    "\n",
    "1. First, review the Goal: {Goal} and the height and weight of {tall}cm and {weight}kg then specify the level of {the_level_of_cardio}.\n",
    "    \n",
    "2. Examine any editorial feedback: {human_feedback}\n",
    "\n",
    "3. Take notes on the level of {intensity}\n",
    "\n",
    "4. You can search the database for exercises by using tools\n",
    "\n",
    "{input}\n",
    "{agent_scratchpad}\"\"\")  # Required for tool calling\n",
    "\n",
    "# Construct the tool calling agent\n",
    "agent = create_tool_calling_agent(\n",
    "    llm=llm,\n",
    "    tools=tools,\n",
    "    prompt=fitness_instructions\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[1m> Entering new AgentExecutor chain...\u001b[0m\n",
      "\u001b[32;1m\u001b[1;3m\n",
      "Invoking: `get_exercises` with `{'body_part': 'back', 'primary_muscles': 'latissimus dorsi', 'secondary_muscles': 'trapezius'}`\n",
      "\n",
      "\n",
      "\u001b[0m\u001b[36;1m\u001b[1;3m['Chin-Ups', 'Behind-the-Neck Pulldown']\u001b[0m\u001b[32;1m\u001b[1;3m\n",
      "Invoking: `get_exercises` with `{'body_part': 'back', 'primary_muscles': 'latissimus dorsi', 'secondary_muscles': 'trapezius'}`\n",
      "\n",
      "\n",
      "\u001b[0m\u001b[36;1m\u001b[1;3m['Chin-Ups', 'Behind-the-Neck Pulldown']\u001b[0m\u001b[32;1m\u001b[1;3m\n",
      "Invoking: `get_exercises` with `{'body_part': 'back', 'primary_muscles': 'latissimus dorsi', 'secondary_muscles': 'trapezius'}`\n",
      "\n",
      "\n",
      "\u001b[0m\u001b[36;1m\u001b[1;3m['Chin-Ups', 'Behind-the-Neck Pulldown']\u001b[0m\u001b[32;1m\u001b[1;3m\u001b[0m\n",
      "\n",
      "\u001b[1m> Finished chain.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True,max_iterations=3)\n",
    "\n",
    "response = agent_executor.invoke({\n",
    "    \"body_part\": \"back\",\n",
    "    \"Goal\": \"gain muscle\",\n",
    "    \"intensity\": \"moderate\",\n",
    "    \"tall\": 180,\n",
    "    \"weight\": 70,\n",
    "    \"the_level_of_cardio\": \"medium\",\n",
    "    \"human_feedback\": \"\",\n",
    "    \"input\": \"Generate workout exercises for back\",\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'body_part': 'back',\n",
       " 'Goal': 'gain muscle',\n",
       " 'intensity': 'moderate',\n",
       " 'tall': 180,\n",
       " 'weight': 70,\n",
       " 'the_level_of_cardio': 'medium',\n",
       " 'human_feedback': '',\n",
       " 'input': 'Generate workout exercises for back',\n",
       " 'output': 'Agent stopped due to max iterations.'}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Generate_plans(TypedDict):\n",
    "    goal:str # goal of the workout_plans\n",
    "    intensity: str # intensity of the workout\n",
    "    tall: int \n",
    "    weight: int\n",
    "    human_feedback: str\n",
    "    max_exercises: int\n",
    "    muscle_workouts: List[MainMuscle] # list of whole body exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import langchain_core"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fitness_instructions=\"\"\"You are tasked with retreiving and review a set of exercises for each muscle group. Follow these instructions carefully:\n",
    "\n",
    "1. First, review the research topic:\n",
    "{goal}\n",
    "        \n",
    "2. Examine any editorial feedback that has been optionally provided to guide creation of the analysts: \n",
    "{human_feedback}\n",
    "3. take notes on the level of {intensity} and / or feedback above.\n",
    "4. Assign one set of exercises to each main muscle group.\n",
    "5. Pick the top {max_exercises} exercises for each SUB muscle group.\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_plans(state: Generate_plans):\n",
    "    \n",
    "    \"\"\" Create plans \"\"\"\n",
    "    print(\"i am here\")\n",
    "    goal=state.get('goal', '')\n",
    "    intensity=state.get('intensity', '')\n",
    "    human_feedback=state.get('human_feedback', '')\n",
    "    max_exercises=state.get('max_exercises', 0)    \n",
    "    # Enforce structured output\n",
    "    structured_llm = llm.with_structured_output(Perspectives)\n",
    "\n",
    "    # System message\n",
    "    system_message = fitness_instructions.format(goal=goal,\n",
    "                                                            human_feedback=human_feedback, \n",
    "                                                            intensity=intensity,max_exercises=max_exercises)\n",
    "\n",
    "    # Generate question \n",
    "    main_muscle_plans = structured_llm.invoke([SystemMessage(content=system_message)]+[HumanMessage(content=\"serach the set of exercises with serach_by_sub_muscle_tool and enhance it.\")])\n",
    "    \n",
    "    # Write the list of analysis to state\n",
    "    return {\"muscle_workouts\": main_muscle_plans}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def search_exercises(main: str = None, sub: str = None):\n",
    "    cursor = connection.cursor()\n",
    "    cursor.execute(\n",
    "        \"\"\"\n",
    "        SELECT * \n",
    "        FROM exercises\n",
    "        WHERE sub_muscles LIKE ?\n",
    "        OR main_muscle LIKE ?;\n",
    "        \"\"\",\n",
    "        (f\"%{sub}%\", f\"%{main}%\")\n",
    "    )\n",
    "    rows = cursor.fetchall()\n",
    "    print(\"I am here\")\n",
    "    # Display the results\n",
    "    return rows\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Generate_plans' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[55], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mhuman_feedback_nod\u001b[39m(state: \u001b[43mGenerate_plans\u001b[49m):\n\u001b[0;32m      2\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\" No-op node that should be interrupted on \"\"\"\u001b[39;00m\n\u001b[0;32m      3\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'Generate_plans' is not defined"
     ]
    }
   ],
   "source": [
    "def human_feedback_nod(state: Generate_plans):\n",
    "    \"\"\" No-op node that should be interrupted on \"\"\"\n",
    "    pass\n",
    "\n",
    "def should_continue(state: Generate_plans):\n",
    "    \"\"\" Return the next node to execute \"\"\"\n",
    "\n",
    "    # Check if human feedback\n",
    "    human_analyst_feedback=state.get('human_feedback', None)\n",
    "    if human_analyst_feedback:\n",
    "        return \"create_plans\"\n",
    "    \n",
    "    # Otherwise end\n",
    "    return END\n",
    "\n",
    "# Add nodes and edges \n",
    "builder = StateGraph(Generate_plans)\n",
    "builder.add_node(\"create_plans\", create_plans)\n",
    "builder.add_node(\"human_feedback_nod\", human_feedback_nod)\n",
    "builder.add_edge(START, \"create_plans\")\n",
    "builder.add_edge(\"create_plans\", \"human_feedback_nod\")\n",
    "builder.add_conditional_edges(\"human_feedback_nod\", should_continue, [\"create_plans\", END])\n",
    "\n",
    "# Compile\n",
    "memory = MemorySaver()\n",
    "graph = builder.compile(interrupt_before=['human_feedback_nod'], checkpointer=memory)\n",
    "\n",
    "# View\n",
    "display(Image(graph.get_graph(xray=1).draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i am here\n",
      "('muscle_workouts', [{'main_muscle': 'Chest', 'sub_muscle': ['Pectoralis Major', 'Pectoralis Minor'], 'exercise': ['Bench Press', 'Dumbbell Press', 'Incline Press']}, {'main_muscle': 'Back', 'sub_muscle': ['Latissimus Dorsi', 'Trapezius'], 'exercise': ['Pull-ups', 'Lat Pulldowns', 'Rows']}, {'main_muscle': 'Legs', 'sub_muscle': ['Quadriceps', 'Hamstrings'], 'exercise': ['Squats', 'Lunges', 'Leg Press']}, {'main_muscle': 'Shoulders', 'sub_muscle': ['Deltoids', 'Rotator Cuff'], 'exercise': ['Shoulder Press', 'Lateral Raises', 'Rear Delt Fly']}, {'main_muscle': 'Arms', 'sub_muscle': ['Biceps', 'Triceps'], 'exercise': ['Bicep Curls', 'Tricep Pushdowns', 'Overhead Dumbbell Extension']}])\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "max_exercises = 2\n",
    "goal = \"lose weight\"\n",
    "intessity = \"high\"\n",
    "tall=178\n",
    "weight=60\n",
    "thread = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream({\"goal\":goal,\"max_exercises\":max_exercises,\"instensity\":intessity}, thread, stream_mode=\"values\"):\n",
    "    # Review\n",
    "    muscle_workouts = event.get('muscle_workouts', '')\n",
    "    if muscle_workouts:\n",
    "        for set in muscle_workouts:\n",
    "            print(set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "StateSnapshot(values={'goal': 'lose weight', 'max_exercises': 2, 'muscle_workouts': Perspectives(muscle_workouts=[{'main_muscle': 'Chest', 'sub_muscle': ['Pectoralis Major', 'Pectoralis Minor'], 'exercise': ['Bench Press', 'Dumbbell Press', 'Incline Press']}, {'main_muscle': 'Back', 'sub_muscle': ['Latissimus Dorsi', 'Trapezius'], 'exercise': ['Pull-ups', 'Lat Pulldowns', 'Rows']}, {'main_muscle': 'Legs', 'sub_muscle': ['Quadriceps', 'Hamstrings'], 'exercise': ['Squats', 'Lunges', 'Leg Press']}, {'main_muscle': 'Shoulders', 'sub_muscle': ['Deltoids', 'Rotator Cuff'], 'exercise': ['Shoulder Press', 'Lateral Raises', 'Rear Delt Fly']}, {'main_muscle': 'Arms', 'sub_muscle': ['Biceps', 'Triceps'], 'exercise': ['Bicep Curls', 'Tricep Pushdowns', 'Overhead Dumbbell Extension']}])}, next=('human_feedback_nod',), config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1efb9e79-7665-6672-8001-cbe35fa2ccc6'}}, metadata={'source': 'loop', 'writes': {'create_plans': {'muscle_workouts': Perspectives(muscle_workouts=[{'main_muscle': 'Chest', 'sub_muscle': ['Pectoralis Major', 'Pectoralis Minor'], 'exercise': ['Bench Press', 'Dumbbell Press', 'Incline Press']}, {'main_muscle': 'Back', 'sub_muscle': ['Latissimus Dorsi', 'Trapezius'], 'exercise': ['Pull-ups', 'Lat Pulldowns', 'Rows']}, {'main_muscle': 'Legs', 'sub_muscle': ['Quadriceps', 'Hamstrings'], 'exercise': ['Squats', 'Lunges', 'Leg Press']}, {'main_muscle': 'Shoulders', 'sub_muscle': ['Deltoids', 'Rotator Cuff'], 'exercise': ['Shoulder Press', 'Lateral Raises', 'Rear Delt Fly']}, {'main_muscle': 'Arms', 'sub_muscle': ['Biceps', 'Triceps'], 'exercise': ['Bicep Curls', 'Tricep Pushdowns', 'Overhead Dumbbell Extension']}])}}, 'thread_id': '1', 'step': 1, 'parents': {}}, created_at='2024-12-14T06:49:40.042486+00:00', parent_config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1efb9e79-5fda-6f78-8000-f74c7bb920e9'}}, tasks=(PregelTask(id='d80022b2-bcda-b817-8f1b-053e5d12ba75', name='human_feedback_nod', path=('__pregel_pull', 'human_feedback_nod'), error=None, interrupts=(), state=None, result=None),))\n"
     ]
    }
   ],
   "source": [
    "state = graph.get_state(thread)\n",
    "print(state)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "lang",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
